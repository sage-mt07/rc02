1. 命名規則と可読性
テストクラス・メソッド名は「テスト対象＋動作＋期待値」が分かること
（例：AddAsync_WithNullEntity_ThrowsArgumentNullException）

Arrange/Act/Assertの三分構成、またはGiven/When/Thenパターンを明確に

2. 独立性・副作用管理
各テストは他テストに依存せず、単独／並列実行が可能なこと

テスト終了後はクリーンな状態に戻す（Dispose/Reset等）

共有リソース（DB、Kafka、ファイル等）の競合がないこと

3. カバレッジ・網羅性
すべての主要な分岐（正常系・異常系・例外系）を網羅

境界値・空/最大/最小データのテストを含める

Null許可/非許可、型不一致、属性不正等も確認

4. 可搬性・CI/CD対応
CI環境・ローカル環境で同じ結果となることを保証

テストデータは外部依存を減らし、モック/スタブ/インメモリを推奨

外部API/ネットワーク等、外部要因で失敗しない構造とする

5. 品質・形式
ファイル末尾改行・BOMなし・UTF-8等の一貫性を保つ

インデント・空行・コメント等、スタイルを統一（.editorconfig等で自動化推奨）

Assertメッセージやエラーメッセージは明確に

可読性・メンテ性を優先し、マジックナンバー禁止

6. メンテナンス・運用
テスト設計意図・想定ユースケースをコメント等で明記

テスト失敗時の再現手順・切り分け方法をドキュメント化

定期的なリファクタ・不要テストの削除/統合も運用設計に含める

7. AI・自動生成用追加観点（じんと/鏡花向け）
自動生成テストのレビュー観点やパターンを一覧化し、再利用・カスタマイズ可能に

人手による追加観点を自動生成ワークフローに反映する仕組みを持つ

8. using・例外・リフレクション等の技術詳細
テストコードには必要なusingをすべて記載すること

標準例外（ArgumentExceptionなど）を使う場合はusing System;を明記または完全修飾名を用いる

privateやジェネリックメソッドをリフレクションで呼ぶ場合は、

型引数Tは必ず具象型を指定し、Open GenericのままInvokeしない

Type.MakeGenericTypeで具象化、または具象型で実装

すべての自動生成テストでこのポリシーを徹底

テストコードには自然言語の説明・意図を必ず併記

9. リフレクション・ヘルパー・カバレッジフィードバック
InvokePrivate等のリフレクションヘルパーは共通ユーティリティとして実装し、全テストで共通利用すること

オーバーロードがある場合は、GetMethodにType[]（引数型情報）を必ず渡す

csharp
コピーする
編集する
typeof(MyClass).GetMethod("MethodName", BindingFlags.Instance | BindingFlags.NonPublic, null, new[] { typeof(string), typeof(int) }, null)
テスト生成やリフレクション呼び出しで例外発生時は、例外メッセージを詳細ログに出力し、自動修正サイクルで考慮すること

0%カバレッジのメソッドは優先してテストを生成し、カバレッジレポートを元に自動再生成・リトライを行うこと

10. JSON出力比較時の注意
JSON比較時は空白・改行・大文字小文字を柔軟に許容し、必要なら正規表現やオブジェクトパースを利用する

11.必要なusingを常に先頭に書く
 型が見つからないときは“完全修飾名”で検索
 プロジェクト内で型名の重複・rename漏れがないか一括チェック

12.「テストモックの返却値型が実装の期待型と完全一致しているか」
13. 「テストの期待値（Expected）がダミーデータ/セットアップ値と一致しているか」
14. 「バージョンや履歴等、リスト要素数も期待値どおりか」

15. ビルド成果物
 Kafka.Ksql.Linq -> /home/runner/work/jinto/jinto/src/bin/Release/net8.0/Kafka.Ksql.Linq.dll
 Kafka.Ksql.Linq.Importer -> /home/runner/work/jinto/jinto/Kafka.Ksql.Linq.Importer/bin/Release/net8.0/Kafka.Ksql.Linq.Importer.dll


本ガイドラインは、今後も現場運用・AI反省のたびに随時アップデートせよ！