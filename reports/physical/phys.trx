<?xml version="1.0" encoding="utf-8"?>
<TestRun id="63099aa5-0529-4904-add7-2e275de9e24f" name="@sagesoho01 2025-08-30 14:55:11" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2025-08-30T14:55:11.0651128+09:00" queuing="2025-08-30T14:55:11.0651128+09:00" start="2025-08-30T14:55:09.0051222+09:00" finish="2025-08-30T15:02:54.1532754+09:00" />
  <TestSettings name="default" id="bf81c494-c181-4051-ab6b-3d0d3fb3bb03">
    <Deployment runDeploymentRoot="_sagesoho01_2025-08-30_14_55_11" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="748dfa26-4166-44a4-8219-5e0a08b52443" testId="f1c03cea-0557-e281-789b-44a1e9e61d2d" testName="Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.DefaultValuesRoundTrip" computerName="sagesoho01" duration="00:00:16.9946978" startTime="2025-08-30T14:56:13.2172475+09:00" endTime="2025-08-30T14:56:13.2172479+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="748dfa26-4166-44a4-8219-5e0a08b52443">
      <Output>
        <ErrorInfo>
          <Message>Assert.Single() Failure: The collection was empty</Message>
          <StackTrace>   at Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.DefaultValuesRoundTrip() in /mnt/c/dev/rc02/physicalTests/OssSamples/DefaultAndBoundaryValueTests.cs:line 98
   at Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.DefaultValuesRoundTrip() in /mnt/c/dev/rc02/physicalTests/OssSamples/DefaultAndBoundaryValueTests.cs:line 107
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5d355540-cdd8-420e-8747-11fc5e6825b5" testId="25efd5e6-c45b-fc2a-05b1-998773bc2c67" testName="Kafka.Ksql.Linq.Tests.Integration.CheckTest1.TestShouldRun" computerName="sagesoho01" duration="00:00:00.0013151" startTime="2025-08-30T14:58:23.2231138+09:00" endTime="2025-08-30T14:58:23.2231144+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5d355540-cdd8-420e-8747-11fc5e6825b5">
      <Output>
        <StdOut>Test start
Test end</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a7bd8ff9-893d-42db-97f5-c168fd50e935" testId="eecbfec5-a063-51de-d5b7-85d66f3da2a2" testName="Kafka.Ksql.Linq.Tests.Integration.PortConnectivityTests.Kafka_Broker_Should_Be_Reachable" computerName="sagesoho01" duration="00:00:01.5417638" startTime="2025-08-30T15:01:17.0202639+09:00" endTime="2025-08-30T15:01:17.0202645+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a7bd8ff9-893d-42db-97f5-c168fd50e935" />
    <UnitTestResult executionId="95397aed-85b7-4048-b62f-267d8e01f301" testId="17213b85-711d-b805-3bc7-22d3d12a9709" testName="Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.DecimalPrecisionRoundTrip" computerName="sagesoho01" duration="00:00:15.8884401" startTime="2025-08-30T14:56:29.1064665+09:00" endTime="2025-08-30T14:56:29.1064668+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="95397aed-85b7-4048-b62f-267d8e01f301">
      <Output>
        <ErrorInfo>
          <Message>Assert.Equal() Failure: Values differ
Expected: 4
Actual:   0</Message>
          <StackTrace>   at Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.DecimalPrecisionRoundTrip() in /mnt/c/dev/rc02/physicalTests/OssSamples/DefaultAndBoundaryValueTests.cs:line 135
   at Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.DecimalPrecisionRoundTrip() in /mnt/c/dev/rc02/physicalTests/OssSamples/DefaultAndBoundaryValueTests.cs:line 136
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2f4bad4e-a517-4fbe-a7d7-7a0464766bf2" testId="1f670e60-a460-2f7f-dd56-948a1c5191c3" testName="Kafka.Ksql.Linq.Tests.Integration.AdvancedDataTypeTests.Decimal_DateTime_Enum_RoundTrip" computerName="sagesoho01" duration="00:00:30.8815333" startTime="2025-08-30T14:55:40.1512633+09:00" endTime="2025-08-30T14:55:40.1512637+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2f4bad4e-a517-4fbe-a7d7-7a0464766bf2">
      <Output>
        <ErrorInfo>
          <Message>Assert.Single() Failure: The collection contained 3 items
Collection: [Record { Created = 2025-08-30T05:41:13.5170000Z, Id = 1, Price = 12.3456 }, Record { Created = 2025-08-30T05:47:16.3110000Z, Id = 1, Price = 12.3456 }, Record { Created = 2025-08-30T05:55:24.8040000Z, Id = 1, Price = 12.3456 }]</Message>
          <StackTrace>   at Kafka.Ksql.Linq.Tests.Integration.AdvancedDataTypeTests.Decimal_DateTime_Enum_RoundTrip() in /mnt/c/dev/rc02/physicalTests/OssSamples/AdvancedDataTypeTests.cs:line 77
   at Kafka.Ksql.Linq.Tests.Integration.AdvancedDataTypeTests.Decimal_DateTime_Enum_RoundTrip() in /mnt/c/dev/rc02/physicalTests/OssSamples/AdvancedDataTypeTests.cs:line 79
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8028ea64-3e4b-4e83-811c-de8223abee3a" testId="52a48a8d-aaad-2671-a532-2ce974e3f69a" testName="Kafka.Ksql.Linq.Tests.Integration.KafkaServiceDownTests.AddAsync_ShouldThrow_WhenKafkaIsDown" computerName="sagesoho01" duration="00:00:01.5392536" startTime="2025-08-30T15:00:49.4918066+09:00" endTime="2025-08-30T15:00:49.4918067+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8028ea64-3e4b-4e83-811c-de8223abee3a">
      <Output>
        <ErrorInfo>
          <Message>Unexpected exception type/message. Got System.ArgumentException: Object of type 'System.Double' cannot be converted to type 'Avro.AvroDecimal'.</Message>
          <StackTrace>   at Kafka.Ksql.Linq.Tests.Integration.KafkaServiceDownTests.AddAsync_ShouldThrow_WhenKafkaIsDown() in /mnt/c/dev/rc02/physicalTests/Connectivity/KafkaServiceDownTests.cs:line 71
   at Kafka.Ksql.Linq.Tests.Integration.KafkaServiceDownTests.AddAsync_ShouldThrow_WhenKafkaIsDown() in /mnt/c/dev/rc02/physicalTests/Connectivity/KafkaServiceDownTests.cs:line 77
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="baead8ae-71ab-45ab-997d-a1f6ce0b8e97" testId="da24b4ec-31be-e42d-feb9-6cc309431547" testName="Kafka.Ksql.Linq.Tests.Integration.KafkaServiceDownTests.ForeachAsync_ShouldThrow_WhenKafkaIsDown" computerName="sagesoho01" duration="00:00:17.7814328" startTime="2025-08-30T15:00:47.9514243+09:00" endTime="2025-08-30T15:00:47.9514249+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="baead8ae-71ab-45ab-997d-a1f6ce0b8e97" />
    <UnitTestResult executionId="ce81004e-0a75-44c2-85d5-de1a41ab1f8e" testId="e6ab55d5-38d6-0580-e5b0-7764a0bff5a2" testName="Kafka.Ksql.Linq.Tests.Integration.KafkaConnectivityTests.ProducerConsumer_RoundTrip" computerName="sagesoho01" duration="00:02:10.5811271" startTime="2025-08-30T15:00:30.1690593+09:00" endTime="2025-08-30T15:00:30.1690595+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ce81004e-0a75-44c2-85d5-de1a41ab1f8e">
      <Output>
        <ErrorInfo>
          <Message>System.TimeoutException : Kafka not reachable at localhost:9092</Message>
          <StackTrace>   at PhysicalTestEnv.Health.WaitForKafkaAsync(String bootstrapServers, Nullable`1 timeout) in /mnt/c/dev/rc02/physicalTests/Env/Health.cs:line 25
   at Kafka.Ksql.Linq.Tests.Integration.EnvKafkaConnectivityTests.SetupAsync() in /mnt/c/dev/rc02/physicalTests/Connectivity/KafkaConnectivityTests.cs:line 90
   at Kafka.Ksql.Linq.Tests.Integration.KafkaConnectivityTests.ProducerConsumer_RoundTrip() in /mnt/c/dev/rc02/physicalTests/Connectivity/KafkaConnectivityTests.cs:line 18
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="04bfa6ad-a728-4c34-b5b6-4b3fb811dda9" testId="1b9a7b5c-1c73-929c-a65b-b3bb50e359bc" testName="Kafka.Ksql.Linq.Tests.Integration.KsqlSyntaxTests.GeneratedQuery_IsValidInKsqlDb(ksql: &quot;CREATE STREAM test_stream AS SELECT * FROM source &quot;···)" computerName="sagesoho01" duration="00:00:02.7074625" startTime="2025-08-30T15:01:21.2427405+09:00" endTime="2025-08-30T15:01:21.2427408+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="04bfa6ad-a728-4c34-b5b6-4b3fb811dda9" />
    <UnitTestResult executionId="be1a883d-2bde-4113-ace5-f46b65e29f6c" testId="2a812374-63bf-e2f9-3af2-1f33d0b7af6d" testName="Kafka.Ksql.Linq.Tests.Integration.SchemaRegistryResetTests.UpperCaseSubjects_ShouldNotExist" computerName="sagesoho01" duration="00:00:00.7678836" startTime="2025-08-30T14:55:10.6136933+09:00" endTime="2025-08-30T14:55:10.6137069+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="be1a883d-2bde-4113-ace5-f46b65e29f6c" />
    <UnitTestResult executionId="68291d7b-f09f-4860-a262-f2ab132c6139" testId="4ba24a6f-994e-4815-d268-26e08ccb87d5" testName="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.AvroKeyValueDifferentTypes2_To_RocksDb" computerName="sagesoho01" duration="00:00:18.6924755" startTime="2025-08-30T15:02:28.7276734+09:00" endTime="2025-08-30T15:02:28.7276736+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="68291d7b-f09f-4860-a262-f2ab132c6139" />
    <UnitTestResult executionId="daaa9818-501c-4fc1-99ff-5596ba665c7d" testId="575bb240-2c56-ce42-7c0d-fdfabac2a9c7" testName="Kafka.Ksql.Linq.Tests.Integration.InvalidQueryTests.GeneratedQuery_IsRejected(ksql: &quot;SELECT CASE WHEN ID=1 THEN 'A' ELSE 2 END FROM ORD&quot;···)" computerName="sagesoho01" duration="00:00:00.5226826" startTime="2025-08-30T15:01:18.0917039+09:00" endTime="2025-08-30T15:01:18.0917047+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="daaa9818-501c-4fc1-99ff-5596ba665c7d" />
    <UnitTestResult executionId="71794044-56c0-4f84-b51b-8746036d5aa7" testId="4d1ab506-de68-e93b-e77a-c25236b29b8f" testName="Kafka.Ksql.Linq.Tests.Integration.CompositeKeyPocoTests.SendAndReceive_CompositeKeyPoco" computerName="sagesoho01" duration="00:00:20.0921702" startTime="2025-08-30T14:55:58.2468219+09:00" endTime="2025-08-30T14:55:58.2468221+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="71794044-56c0-4f84-b51b-8746036d5aa7">
      <Output>
        <ErrorInfo>
          <Message>Confluent.SchemaRegistry.SchemaRegistryException : Schema being registered is incompatible with an earlier schema for subject "orders-key", details: [{errorType:'NAME_MISMATCH', description:'The name of the schema has changed (path '/name')', additionalInfo:'expected: DummyRecord'}, {oldSchemaVersion: 1}, {oldSchema: '{"type":"record","name":"DummyRecord","fields":[{"name":"x","type":"string"}]}'}, {compatibility: 'BACKWARD'}]; error code: 409</Message>
          <StackTrace>   at Confluent.SchemaRegistry.RestService.ExecuteOnOneInstanceAsync(Func`1 createRequest)
   at Confluent.SchemaRegistry.RestService.RequestAsync[T](String endPoint, HttpMethod method, Object[] jsonBody)
   at Confluent.SchemaRegistry.RestService.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
   at Confluent.Shared.CollectionUtils.ConcurrentDictionaryExtensions.GetOrAddAsync[TKey,TValue](ConcurrentDictionary`2 dictionary, TKey key, Func`2 valueFactory)
   at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
   at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaAsync(String subject, Schema schema, Boolean normalize)
   at Kafka.Ksql.Linq.SchemaRegistryTools.SchemaRegistryExtensions.RegisterSchemaIfNewAsync(ISchemaRegistryClient client, String subject, String schema) in /mnt/c/dev/rc02/src/SchemaRegistryTools/SchemaRegistryExtensions.cs:line 36
   at Kafka.Ksql.Linq.KsqlContext.RegisterSchemasAndMaterializeAsync() in /mnt/c/dev/rc02/src/KsqlContext.cs:line 560
   at Kafka.Ksql.Linq.KsqlContext.InitializeWithSchemaRegistration() in /mnt/c/dev/rc02/src/KsqlContext.cs:line 489
   at Kafka.Ksql.Linq.KsqlContext.InitializeCore(ILoggerFactory loggerFactory) in /mnt/c/dev/rc02/src/KsqlContext.cs:line 129
   at Kafka.Ksql.Linq.KsqlContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory) in /mnt/c/dev/rc02/src/KsqlContext.cs:line 94
   at Kafka.Ksql.Linq.Tests.Integration.CompositeKeyPocoTests.OrderContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory) in /mnt/c/dev/rc02/physicalTests/OssSamples/CompositeKeyPocoTests.cs:line 23
   at Kafka.Ksql.Linq.Tests.Integration.CompositeKeyPocoTests.SendAndReceive_CompositeKeyPoco() in /mnt/c/dev/rc02/physicalTests/OssSamples/CompositeKeyPocoTests.cs:line 54
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3564a95e-5290-44a9-9afc-9df916893c05" testId="6dc1c76e-ddda-5058-33dc-fc758c3924b0" testName="Kafka.Ksql.Linq.Tests.Integration.DlqIntegrationTests.ForEachAsync_OnErrorDlq_WritesToDlq" computerName="sagesoho01" duration="00:00:12.3698699" startTime="2025-08-30T14:56:57.3411599+09:00" endTime="2025-08-30T14:56:57.3411602+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3564a95e-5290-44a9-9afc-9df916893c05">
      <Output>
        <ErrorInfo>
          <Message>Confluent.SchemaRegistry.SchemaRegistryException : Schema being registered is incompatible with an earlier schema for subject "orders-value", details: [{errorType:'NAME_MISMATCH', description:'The name of the schema has changed (path '/name')', additionalInfo:'expected: DummyRecord'}, {errorType:'READER_FIELD_MISSING_DEFAULT_VALUE', description:'The field 'Amount' at path '/fields/1' in the new schema has no default value and is missing in the old schema', additionalInfo:'Amount'}, {oldSchemaVersion: 1}, {oldSchema: '{"type":"record","name":"DummyRecord","fields":[{"name":"x","type":"string"}]}'}, {compatibility: 'BACKWARD'}]; error code: 409</Message>
          <StackTrace>   at Confluent.SchemaRegistry.RestService.ExecuteOnOneInstanceAsync(Func`1 createRequest)
   at Confluent.SchemaRegistry.RestService.RequestAsync[T](String endPoint, HttpMethod method, Object[] jsonBody)
   at Confluent.SchemaRegistry.RestService.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
   at Confluent.Shared.CollectionUtils.ConcurrentDictionaryExtensions.GetOrAddAsync[TKey,TValue](ConcurrentDictionary`2 dictionary, TKey key, Func`2 valueFactory)
   at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
   at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaAsync(String subject, Schema schema, Boolean normalize)
   at Kafka.Ksql.Linq.SchemaRegistryTools.SchemaRegistryExtensions.RegisterSchemaIfNewAsync(ISchemaRegistryClient client, String subject, String schema) in /mnt/c/dev/rc02/src/SchemaRegistryTools/SchemaRegistryExtensions.cs:line 36
   at Kafka.Ksql.Linq.KsqlContext.RegisterSchemasAndMaterializeAsync() in /mnt/c/dev/rc02/src/KsqlContext.cs:line 565
   at Kafka.Ksql.Linq.KsqlContext.InitializeWithSchemaRegistration() in /mnt/c/dev/rc02/src/KsqlContext.cs:line 489
   at Kafka.Ksql.Linq.KsqlContext.InitializeCore(ILoggerFactory loggerFactory) in /mnt/c/dev/rc02/src/KsqlContext.cs:line 129
   at Kafka.Ksql.Linq.KsqlContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory) in /mnt/c/dev/rc02/src/KsqlContext.cs:line 94
   at Kafka.Ksql.Linq.Tests.Integration.DlqIntegrationTests.OrderContext..ctor(KsqlDslOptions options) in /mnt/c/dev/rc02/physicalTests/OssSamples/DlqIntegrationTests.cs:line 32
   at Kafka.Ksql.Linq.Tests.Integration.DlqIntegrationTests.ForEachAsync_OnErrorDlq_WritesToDlq() in /mnt/c/dev/rc02/physicalTests/OssSamples/DlqIntegrationTests.cs:line 55
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="284d30ec-5e4d-4085-9304-7353b4a92b7c" testId="94666fe8-200f-47ec-05d3-966f9f35b2a6" testName="Kafka.Ksql.Linq.Tests.Integration.DummyFlagSchemaRecognitionTests.DummyMessages_EnableQueries" computerName="sagesoho01" duration="00:00:18.9871118" startTime="2025-08-30T15:01:40.2328992+09:00" endTime="2025-08-30T15:01:40.2328996+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="284d30ec-5e4d-4085-9304-7353b4a92b7c">
      <Output>
        <ErrorInfo>
          <Message>Confluent.SchemaRegistry.SchemaRegistryException : Schema being registered is incompatible with an earlier schema for subject "customers-value", details: [{errorType:'NAME_MISMATCH', description:'The name of the schema has changed (path '/name')', additionalInfo:'expected: DummyRecord'}, {oldSchemaVersion: 1}, {oldSchema: '{"type":"record","name":"DummyRecord","fields":[{"name":"x","type":"string"}]}'}, {compatibility: 'BACKWARD'}]; error code: 409</Message>
          <StackTrace>   at Confluent.SchemaRegistry.RestService.ExecuteOnOneInstanceAsync(Func`1 createRequest)
   at Confluent.SchemaRegistry.RestService.RequestAsync[T](String endPoint, HttpMethod method, Object[] jsonBody)
   at Confluent.SchemaRegistry.RestService.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
   at Confluent.Shared.CollectionUtils.ConcurrentDictionaryExtensions.GetOrAddAsync[TKey,TValue](ConcurrentDictionary`2 dictionary, TKey key, Func`2 valueFactory)
   at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
   at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaAsync(String subject, Schema schema, Boolean normalize)
   at Kafka.Ksql.Linq.SchemaRegistryTools.SchemaRegistryExtensions.RegisterSchemaIfNewAsync(ISchemaRegistryClient client, String subject, String schema) in /mnt/c/dev/rc02/src/SchemaRegistryTools/SchemaRegistryExtensions.cs:line 36
   at Kafka.Ksql.Linq.KsqlContext.RegisterSchemasAndMaterializeAsync() in /mnt/c/dev/rc02/src/KsqlContext.cs:line 565
   at Kafka.Ksql.Linq.KsqlContext.InitializeWithSchemaRegistration() in /mnt/c/dev/rc02/src/KsqlContext.cs:line 489
   at Kafka.Ksql.Linq.KsqlContext.InitializeCore(ILoggerFactory loggerFactory) in /mnt/c/dev/rc02/src/KsqlContext.cs:line 129
   at Kafka.Ksql.Linq.KsqlContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory) in /mnt/c/dev/rc02/src/KsqlContext.cs:line 94
   at Kafka.Ksql.Linq.Tests.Integration.DummyFlagSchemaRecognitionTests.DummyContext..ctor(KsqlDslOptions options) in /mnt/c/dev/rc02/physicalTests/OssSamples/DummyFlagSchemaRecognitionTests.cs:line 66
   at Kafka.Ksql.Linq.Tests.Integration.DummyFlagSchemaRecognitionTests.ProduceDummyRecordsAsync() in /mnt/c/dev/rc02/physicalTests/OssSamples/DummyFlagSchemaRecognitionTests.cs:line 93
   at Kafka.Ksql.Linq.Tests.Integration.DummyFlagSchemaRecognitionTests.DummyMessages_EnableQueries() in /mnt/c/dev/rc02/physicalTests/OssSamples/DummyFlagSchemaRecognitionTests.cs:line 147
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3cf089d5-ef57-489b-82cc-14404c294d47" testId="1efd2b35-e074-3119-cb38-1db783196bee" testName="Kafka.Ksql.Linq.Tests.Integration.PrimingBehaviorTests.AlwaysPriming_DoesNotLeakIntoConsumption" computerName="sagesoho01" duration="00:00:19.9227016" startTime="2025-08-30T14:58:10.8501925+09:00" endTime="2025-08-30T14:58:10.8501930+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3cf089d5-ef57-489b-82cc-14404c294d47" />
    <UnitTestResult executionId="6cd660a0-a424-4a1a-b46d-42f55d9ff445" testId="8f34b762-931b-3785-315c-8c6659ecd632" testName="Kafka.Ksql.Linq.Tests.Integration.PortConnectivityTests.SchemaRegistry_Should_Be_Reachable" computerName="sagesoho01" duration="00:00:00.1230288" startTime="2025-08-30T15:01:17.1442729+09:00" endTime="2025-08-30T15:01:17.1442731+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6cd660a0-a424-4a1a-b46d-42f55d9ff445" />
    <UnitTestResult executionId="0d863e3a-816f-4600-b33b-5ab5c6066295" testId="fa46f409-6539-d06f-aa37-8cfd2c4998c0" testName="Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_TolerantTests.EX01_ForeachAsync_KafkaDown_ShouldFailGracefully" computerName="sagesoho01" duration="00:00:01.3374334" startTime="2025-08-30T14:58:29.1604757+09:00" endTime="2025-08-30T14:58:29.1604778+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0d863e3a-816f-4600-b33b-5ab5c6066295" />
    <UnitTestResult executionId="0d569881-b15a-410c-9c43-b55d4e07e40a" testId="5917e101-0acb-1110-36fc-a2e3d83d03f6" testName="Kafka.Ksql.Linq.Tests.Integration.SchemaNameCaseSensitivityTests.LowercaseField_ShouldSucceed" computerName="sagesoho01" duration="00:00:12.3685828" startTime="2025-08-30T14:58:23.2207474+09:00" endTime="2025-08-30T14:58:23.2207479+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0d569881-b15a-410c-9c43-b55d4e07e40a">
      <Output>
        <ErrorInfo>
          <Message>Confluent.SchemaRegistry.SchemaRegistryException : Schema being registered is incompatible with an earlier schema for subject "orders-value", details: [{errorType:'NAME_MISMATCH', description:'The name of the schema has changed (path '/name')', additionalInfo:'expected: DummyRecord'}, {errorType:'READER_FIELD_MISSING_DEFAULT_VALUE', description:'The field 'Amount' at path '/fields/1' in the new schema has no default value and is missing in the old schema', additionalInfo:'Amount'}, {oldSchemaVersion: 1}, {oldSchema: '{"type":"record","name":"DummyRecord","fields":[{"name":"x","type":"string"}]}'}, {compatibility: 'BACKWARD'}]; error code: 409</Message>
          <StackTrace>   at Confluent.SchemaRegistry.RestService.ExecuteOnOneInstanceAsync(Func`1 createRequest)
   at Confluent.SchemaRegistry.RestService.RequestAsync[T](String endPoint, HttpMethod method, Object[] jsonBody)
   at Confluent.SchemaRegistry.RestService.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
   at Confluent.Shared.CollectionUtils.ConcurrentDictionaryExtensions.GetOrAddAsync[TKey,TValue](ConcurrentDictionary`2 dictionary, TKey key, Func`2 valueFactory)
   at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
   at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaAsync(String subject, Schema schema, Boolean normalize)
   at Kafka.Ksql.Linq.SchemaRegistryTools.SchemaRegistryExtensions.RegisterSchemaIfNewAsync(ISchemaRegistryClient client, String subject, String schema) in /mnt/c/dev/rc02/src/SchemaRegistryTools/SchemaRegistryExtensions.cs:line 36
   at Kafka.Ksql.Linq.KsqlContext.RegisterSchemasAndMaterializeAsync() in /mnt/c/dev/rc02/src/KsqlContext.cs:line 565
   at Kafka.Ksql.Linq.KsqlContext.InitializeWithSchemaRegistration() in /mnt/c/dev/rc02/src/KsqlContext.cs:line 489
   at Kafka.Ksql.Linq.KsqlContext.InitializeCore(ILoggerFactory loggerFactory) in /mnt/c/dev/rc02/src/KsqlContext.cs:line 129
   at Kafka.Ksql.Linq.KsqlContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory) in /mnt/c/dev/rc02/src/KsqlContext.cs:line 94
   at Kafka.Ksql.Linq.Tests.Integration.SchemaNameCaseSensitivityTests.OrderContext..ctor(KsqlDslOptions options) in /mnt/c/dev/rc02/physicalTests/OssSamples/SchemaNameCaseSensitivityTests.cs:line 36
   at Kafka.Ksql.Linq.Tests.Integration.SchemaNameCaseSensitivityTests.LowercaseField_ShouldSucceed() in /mnt/c/dev/rc02/physicalTests/OssSamples/SchemaNameCaseSensitivityTests.cs:line 67
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="83e26442-a1e6-4d8b-aa23-92168a8950b1" testId="e4cc62b9-b52c-9218-2bc8-d3fac82e021d" testName="Kafka.Ksql.Linq.Tests.Integration.PortConnectivityTests.KsqlDb_Should_Be_Reachable" computerName="sagesoho01" duration="00:00:00.4212871" startTime="2025-08-30T15:01:17.5663670+09:00" endTime="2025-08-30T15:01:17.5663677+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="83e26442-a1e6-4d8b-aa23-92168a8950b1" />
    <UnitTestResult executionId="8d67482f-4631-4dc7-be1a-6bd357a0a07d" testId="f4acc4e9-4e3f-fa27-9e40-28a744927795" testName="Kafka.Ksql.Linq.Tests.Integration.NoKeyPocoTests.SendAndReceive_NoKeyRecord" computerName="sagesoho01" duration="00:00:24.9037028" startTime="2025-08-30T14:57:52.9536915+09:00" endTime="2025-08-30T14:57:52.9536919+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8d67482f-4631-4dc7-be1a-6bd357a0a07d">
      <Output>
        <ErrorInfo>
          <Message>Assert.Single() Failure: The collection contained 3 items
Collection: [Record { Id = 1, Name = "alice" }, Record { Id = 1, Name = "alice" }, Record { Id = 1, Name = "alice" }]</Message>
          <StackTrace>   at Kafka.Ksql.Linq.Tests.Integration.NoKeyPocoTests.SendAndReceive_NoKeyRecord() in /mnt/c/dev/rc02/physicalTests/OssSamples/NoKeyPocoTests.cs:line 65
   at Kafka.Ksql.Linq.Tests.Integration.NoKeyPocoTests.SendAndReceive_NoKeyRecord() in /mnt/c/dev/rc02/physicalTests/OssSamples/NoKeyPocoTests.cs:line 69
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7d68f094-59de-4580-bc9a-d99b83b9535c" testId="6ad00dfe-e135-6dc8-b1bf-666fa5fa3455" testName="Kafka.Ksql.Linq.Tests.Integration.SchemaRegistryResetTests.DuplicateSchemaRegistration_ShouldSucceed" computerName="sagesoho01" duration="00:00:00.3235364" startTime="2025-08-30T14:55:11.2464416+09:00" endTime="2025-08-30T14:55:11.2464418+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7d68f094-59de-4580-bc9a-d99b83b9535c" />
    <UnitTestResult executionId="72db2781-1acf-43de-9a05-7e1300cca4b4" testId="173a5c6a-39b7-895e-9b5a-1e15dc155fed" testName="Kafka.Ksql.Linq.Tests.Integration.SchemaRegistryResetTests.Setup_ShouldRegisterAllSchemas" computerName="sagesoho01" duration="00:00:00.3067896" startTime="2025-08-30T14:55:10.9222387+09:00" endTime="2025-08-30T14:55:10.9222389+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="72db2781-1acf-43de-9a05-7e1300cca4b4" />
    <UnitTestResult executionId="9029dd3f-8444-4b3e-bf63-a345be6bcffc" testId="35c33335-3c6f-41c6-e0cd-a71e8b0b3178" testName="Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.BoundaryValuesRoundTrip" computerName="sagesoho01" duration="00:00:17.8242695" startTime="2025-08-30T14:56:44.9695675+09:00" endTime="2025-08-30T14:56:44.9695676+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9029dd3f-8444-4b3e-bf63-a345be6bcffc">
      <Output>
        <ErrorInfo>
          <Message>Assert.Equal() Failure: Values differ
Expected: 2
Actual:   0</Message>
          <StackTrace>   at Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.BoundaryValuesRoundTrip() in /mnt/c/dev/rc02/physicalTests/OssSamples/DefaultAndBoundaryValueTests.cs:line 187
   at Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.BoundaryValuesRoundTrip() in /mnt/c/dev/rc02/physicalTests/OssSamples/DefaultAndBoundaryValueTests.cs:line 188
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f1f7be02-98c1-44fa-95c3-fa554026df5e" testId="821b062e-05e6-7b61-70b6-a85ab6158b98" testName="Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_StrictTests.EX02_AddAsync_KafkaDown_ShouldLogAndTimeout" computerName="sagesoho01" duration="00:00:00.3484692" startTime="2025-08-30T14:58:27.8221236+09:00" endTime="2025-08-30T14:58:27.8221238+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f1f7be02-98c1-44fa-95c3-fa554026df5e">
      <Output>
        <ErrorInfo>
          <Message>Unexpected exception: System.ArgumentException: Object of type 'System.Double' cannot be converted to type 'Avro.AvroDecimal'.</Message>
          <StackTrace>   at Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_StrictTests.EX02_AddAsync_KafkaDown_ShouldLogAndTimeout() in /mnt/c/dev/rc02/physicalTests/Connectivity/BigBang_KafkaConnection_StrictTests.cs:line 61
   at Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_StrictTests.EX02_AddAsync_KafkaDown_ShouldLogAndTimeout() in /mnt/c/dev/rc02/physicalTests/Connectivity/BigBang_KafkaConnection_StrictTests.cs:line 61
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c8b9efaf-c7a0-4492-9d99-1dfd6014e7b2" testId="df016763-3c38-6299-bd82-3419be01b352" testName="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.String_To_RocksDb" computerName="sagesoho01" duration="00:00:09.9088412" startTime="2025-08-30T15:02:02.5524831+09:00" endTime="2025-08-30T15:02:02.5524833+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c8b9efaf-c7a0-4492-9d99-1dfd6014e7b2" />
    <UnitTestResult executionId="d2f97a53-2890-4966-a39c-bdb89c07caf8" testId="6e9b6ef9-ac09-772f-de65-0a61c351b479" testName="Kafka.Ksql.Linq.Tests.Integration.ManualCommitIntegrationTests.ManualCommit_PersistsOffset" computerName="sagesoho01" duration="00:00:20.3295615" startTime="2025-08-30T14:57:30.0199577+09:00" endTime="2025-08-30T14:57:30.0199583+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d2f97a53-2890-4966-a39c-bdb89c07caf8">
      <Output>
        <ErrorInfo>
          <Message>System.NullReferenceException : Object reference not set to an instance of an object.</Message>
          <StackTrace>   at Kafka.Ksql.Linq.Tests.Integration.ManualCommitIntegrationTests.ManualCommit_PersistsOffset() in /mnt/c/dev/rc02/physicalTests/OssSamples/ManualCommitIntegrationTests.cs:line 89
   at Kafka.Ksql.Linq.Tests.Integration.ManualCommitIntegrationTests.ManualCommit_PersistsOffset() in /mnt/c/dev/rc02/physicalTests/OssSamples/ManualCommitIntegrationTests.cs:line 90
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a265971d-676b-44bc-a4fb-9c5140c215c9" testId="6288fb0e-9d2c-a603-9db2-af88d05ffb27" testName="Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_StrictTests.EX02_ForeachAsync_KafkaDown_ShouldLogAndTimeout" computerName="sagesoho01" duration="00:00:04.2486495" startTime="2025-08-30T14:58:27.4719603+09:00" endTime="2025-08-30T14:58:27.4719606+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a265971d-676b-44bc-a4fb-9c5140c215c9" />
    <UnitTestResult executionId="fc096ece-2c0f-4dba-803c-191404cdb82b" testId="ccf2bf61-9a31-6941-50d4-73c008678752" testName="Kafka.Ksql.Linq.Tests.Integration.KsqlDbServiceDownTests.ExecuteStatement_ShouldFail_WhenKsqlDbDown" computerName="sagesoho01" duration="00:00:28.0252991" startTime="2025-08-30T15:01:15.4755580+09:00" endTime="2025-08-30T15:01:15.4755583+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fc096ece-2c0f-4dba-803c-191404cdb82b" />
    <UnitTestResult executionId="801fbd5c-1ca7-4b03-90f3-686531da8d33" testId="ad9ac948-5de9-3016-dc11-7e1e0ddb9a1f" testName="Kafka.Ksql.Linq.Tests.Integration.InvalidQueryTests.GeneratedQuery_IsRejected(ksql: &quot;SELECT ID, COUNT(*) FROM ORDERS GROUP BY ID;&quot;)" computerName="sagesoho01" duration="00:00:00.4187981" startTime="2025-08-30T15:01:18.5113255+09:00" endTime="2025-08-30T15:01:18.5113257+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="801fbd5c-1ca7-4b03-90f3-686531da8d33" />
    <UnitTestResult executionId="fbda5ffe-94e0-41c0-8393-0eadb9885db5" testId="ce6a13c7-e84b-fd4c-062d-d534410ea237" testName="Kafka.Ksql.Linq.Tests.Integration.JoinIntegrationTests.TwoTableJoin_Query_ShouldBeValid" computerName="sagesoho01" duration="00:00:14.4361483" startTime="2025-08-30T15:01:52.6434996+09:00" endTime="2025-08-30T15:01:52.6435008+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fbda5ffe-94e0-41c0-8393-0eadb9885db5">
      <Output>
        <ErrorInfo>
          <Message>Confluent.SchemaRegistry.SchemaRegistryException : Schema being registered is incompatible with an earlier schema for subject "orders-value", details: [{errorType:'NAME_MISMATCH', description:'The name of the schema has changed (path '/name')', additionalInfo:'expected: DummyRecord'}, {errorType:'READER_FIELD_MISSING_DEFAULT_VALUE', description:'The field 'Amount' at path '/fields/1' in the new schema has no default value and is missing in the old schema', additionalInfo:'Amount'}, {oldSchemaVersion: 1}, {oldSchema: '{"type":"record","name":"DummyRecord","fields":[{"name":"x","type":"string"}]}'}, {compatibility: 'BACKWARD'}]; error code: 409</Message>
          <StackTrace>   at Confluent.SchemaRegistry.RestService.ExecuteOnOneInstanceAsync(Func`1 createRequest)
   at Confluent.SchemaRegistry.RestService.RequestAsync[T](String endPoint, HttpMethod method, Object[] jsonBody)
   at Confluent.SchemaRegistry.RestService.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
   at Confluent.Shared.CollectionUtils.ConcurrentDictionaryExtensions.GetOrAddAsync[TKey,TValue](ConcurrentDictionary`2 dictionary, TKey key, Func`2 valueFactory)
   at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
   at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaAsync(String subject, Schema schema, Boolean normalize)
   at Kafka.Ksql.Linq.SchemaRegistryTools.SchemaRegistryExtensions.RegisterSchemaIfNewAsync(ISchemaRegistryClient client, String subject, String schema) in /mnt/c/dev/rc02/src/SchemaRegistryTools/SchemaRegistryExtensions.cs:line 36
   at Kafka.Ksql.Linq.KsqlContext.RegisterSchemasAndMaterializeAsync() in /mnt/c/dev/rc02/src/KsqlContext.cs:line 565
   at Kafka.Ksql.Linq.KsqlContext.InitializeWithSchemaRegistration() in /mnt/c/dev/rc02/src/KsqlContext.cs:line 489
   at Kafka.Ksql.Linq.KsqlContext.InitializeCore(ILoggerFactory loggerFactory) in /mnt/c/dev/rc02/src/KsqlContext.cs:line 129
   at Kafka.Ksql.Linq.KsqlContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory) in /mnt/c/dev/rc02/src/KsqlContext.cs:line 94
   at Kafka.Ksql.Linq.Tests.Integration.JoinIntegrationTests.JoinContext..ctor(KsqlDslOptions options) in /mnt/c/dev/rc02/physicalTests/OssSamples/JoinIntegrationTests.cs:line 39
   at Kafka.Ksql.Linq.Tests.Integration.JoinIntegrationTests.TwoTableJoin_Query_ShouldBeValid() in /mnt/c/dev/rc02/physicalTests/OssSamples/JoinIntegrationTests.cs:line 69
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="48a28fa7-7b59-4daf-848a-8c808ca554ad" testId="e7664d42-1a36-a709-59e4-00b5e1d7cc8f" testName="Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_TolerantTests.EX01_AddAsync_KafkaDown_ShouldFailGracefully" computerName="sagesoho01" duration="00:00:00.4334194" startTime="2025-08-30T14:58:29.5955479+09:00" endTime="2025-08-30T14:58:29.5955482+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="48a28fa7-7b59-4daf-848a-8c808ca554ad">
      <Output>
        <ErrorInfo>
          <Message>Unexpected exception: System.ArgumentException: Object of type 'System.Double' cannot be converted to type 'Avro.AvroDecimal'.</Message>
          <StackTrace>   at Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_TolerantTests.EX01_AddAsync_KafkaDown_ShouldFailGracefully() in /mnt/c/dev/rc02/physicalTests/Connectivity/BigBang_KafkaConnection_TolerantTests.cs:line 55
   at Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_TolerantTests.EX01_AddAsync_KafkaDown_ShouldFailGracefully() in /mnt/c/dev/rc02/physicalTests/Connectivity/BigBang_KafkaConnection_TolerantTests.cs:line 55
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8c0587c2-1fb0-4c33-8269-cd01304fa421" testId="df528fe1-0ce1-88e8-82f8-8c3a1b02c21b" testName="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.AvroKey_To_RocksDb" computerName="sagesoho01" duration="00:00:09.4519887" startTime="2025-08-30T15:02:12.0051332+09:00" endTime="2025-08-30T15:02:12.0051333+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8c0587c2-1fb0-4c33-8269-cd01304fa421" />
    <UnitTestResult executionId="68460c7e-5c8b-48d1-80d0-b0db93ee9c08" testId="5116377b-e4db-606a-d1c3-12b84ea4bfc0" testName="Kafka.Ksql.Linq.Tests.Integration.DummyFlagMessageTests.SendAsync_AddsDummyFlagHeader" computerName="sagesoho01" duration="00:00:14.3800336" startTime="2025-08-30T14:57:09.6889959+09:00" endTime="2025-08-30T14:57:09.6889963+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="68460c7e-5c8b-48d1-80d0-b0db93ee9c08">
      <Output>
        <ErrorInfo>
          <Message>Confluent.SchemaRegistry.SchemaRegistryException : Schema being registered is incompatible with an earlier schema for subject "orders-value", details: [{errorType:'NAME_MISMATCH', description:'The name of the schema has changed (path '/name')', additionalInfo:'expected: DummyRecord'}, {errorType:'READER_FIELD_MISSING_DEFAULT_VALUE', description:'The field 'Amount' at path '/fields/1' in the new schema has no default value and is missing in the old schema', additionalInfo:'Amount'}, {oldSchemaVersion: 1}, {oldSchema: '{"type":"record","name":"DummyRecord","fields":[{"name":"x","type":"string"}]}'}, {compatibility: 'BACKWARD'}]; error code: 409</Message>
          <StackTrace>   at Confluent.SchemaRegistry.RestService.ExecuteOnOneInstanceAsync(Func`1 createRequest)
   at Confluent.SchemaRegistry.RestService.RequestAsync[T](String endPoint, HttpMethod method, Object[] jsonBody)
   at Confluent.SchemaRegistry.RestService.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
   at Confluent.Shared.CollectionUtils.ConcurrentDictionaryExtensions.GetOrAddAsync[TKey,TValue](ConcurrentDictionary`2 dictionary, TKey key, Func`2 valueFactory)
   at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
   at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaAsync(String subject, Schema schema, Boolean normalize)
   at Kafka.Ksql.Linq.SchemaRegistryTools.SchemaRegistryExtensions.RegisterSchemaIfNewAsync(ISchemaRegistryClient client, String subject, String schema) in /mnt/c/dev/rc02/src/SchemaRegistryTools/SchemaRegistryExtensions.cs:line 36
   at Kafka.Ksql.Linq.KsqlContext.RegisterSchemasAndMaterializeAsync() in /mnt/c/dev/rc02/src/KsqlContext.cs:line 565
   at Kafka.Ksql.Linq.KsqlContext.InitializeWithSchemaRegistration() in /mnt/c/dev/rc02/src/KsqlContext.cs:line 489
   at Kafka.Ksql.Linq.KsqlContext.InitializeCore(ILoggerFactory loggerFactory) in /mnt/c/dev/rc02/src/KsqlContext.cs:line 129
   at Kafka.Ksql.Linq.KsqlContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory) in /mnt/c/dev/rc02/src/KsqlContext.cs:line 94
   at Kafka.Ksql.Linq.Tests.Integration.DummyFlagMessageTests.DummyContext..ctor(KsqlDslOptions options) in /mnt/c/dev/rc02/physicalTests/OssSamples/DummyFlagMessageTests.cs:line 39
   at Kafka.Ksql.Linq.Tests.Integration.DummyFlagMessageTests.SendAsync_AddsDummyFlagHeader() in /mnt/c/dev/rc02/physicalTests/OssSamples/DummyFlagMessageTests.cs:line 67
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="db57791b-46c7-4864-b3e2-036eb1cc6c45" testId="cc8abef5-dd5f-24f8-0952-fe9919df9349" testName="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.AvroKeyValueDifferentTypes_To_RocksDb" computerName="sagesoho01" duration="00:00:08.0512149" startTime="2025-08-30T15:02:53.9873179+09:00" endTime="2025-08-30T15:02:53.9873183+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="db57791b-46c7-4864-b3e2-036eb1cc6c45">
      <Output>
        <ErrorInfo>
          <Message>Streamiz.Kafka.Net.Errors.InvalidStateStoreException : The state store, avro-key-different-store, may have migrated to another instance.</Message>
          <StackTrace>   at Streamiz.Kafka.Net.State.Internal.QueryableStoreProvider.GetStore[T,K,V](StoreQueryParameters`3 storeQueryParameters)
   at Streamiz.Kafka.Net.KafkaStream.Store[T,K,V](StoreQueryParameters`3 storeQueryParameters)
   at Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.RunAvroToRocksDbAsync[TKey,TValue](String topic, String storeName, String applicationId, TKey key, TValue value) in /mnt/c/dev/rc02/physicalTests/Streamiz/StreamizRocksDbTests.cs:line 148
   at Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.AvroKeyValueDifferentTypes_To_RocksDb() in /mnt/c/dev/rc02/physicalTests/Streamiz/StreamizRocksDbTests.cs:line 322
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cc77328b-6f9d-4bf4-9a34-bcfa29accf90" testId="4a90876b-2734-76cc-4f62-bf397a2e6c64" testName="Kafka.Ksql.Linq.Tests.Integration.KsqlSyntaxTests.GeneratedQuery_IsValidInKsqlDb(ksql: &quot;SELECT CustomerId, COUNT(*) FROM orders GROUP BY C&quot;···)" computerName="sagesoho01" duration="00:00:01.9824106" startTime="2025-08-30T15:01:20.4949007+09:00" endTime="2025-08-30T15:01:20.4949009+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cc77328b-6f9d-4bf4-9a34-bcfa29accf90" />
    <UnitTestResult executionId="7533c64f-b1a6-42e6-851a-5da259d13a3e" testId="b2f10166-e5ea-0765-10ef-c5e28910aacf" testName="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.Bytes_To_RocksDb" computerName="sagesoho01" duration="00:00:09.5355298" startTime="2025-08-30T15:02:38.2641373+09:00" endTime="2025-08-30T15:02:38.2641375+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7533c64f-b1a6-42e6-851a-5da259d13a3e" />
    <UnitTestResult executionId="c9e57833-54cc-46e5-9e23-f95967657e57" testId="99e73d35-eff3-a06d-ee12-a6de28a3f795" testName="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.Avro_To_RocksDb" computerName="sagesoho01" duration="00:00:09.6970776" startTime="2025-08-30T15:02:45.9320788+09:00" endTime="2025-08-30T15:02:45.9320790+09:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c9e57833-54cc-46e5-9e23-f95967657e57" />
  </Results>
  <TestDefinitions>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.String_To_RocksDb" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="df016763-3c38-6299-bd82-3419be01b352">
      <Execution id="c8b9efaf-c7a0-4492-9d99-1dfd6014e7b2" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests" name="String_To_RocksDb" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.KafkaServiceDownTests.ForeachAsync_ShouldThrow_WhenKafkaIsDown" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="da24b4ec-31be-e42d-feb9-6cc309431547">
      <Execution id="baead8ae-71ab-45ab-997d-a1f6ce0b8e97" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.KafkaServiceDownTests" name="ForeachAsync_ShouldThrow_WhenKafkaIsDown" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_StrictTests.EX02_AddAsync_KafkaDown_ShouldLogAndTimeout" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="821b062e-05e6-7b61-70b6-a85ab6158b98">
      <Execution id="f1f7be02-98c1-44fa-95c3-fa554026df5e" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_StrictTests" name="EX02_AddAsync_KafkaDown_ShouldLogAndTimeout" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.ManualCommitIntegrationTests.ManualCommit_PersistsOffset" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="6e9b6ef9-ac09-772f-de65-0a61c351b479">
      <Execution id="d2f97a53-2890-4966-a39c-bdb89c07caf8" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.ManualCommitIntegrationTests" name="ManualCommit_PersistsOffset" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.DecimalPrecisionRoundTrip" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="17213b85-711d-b805-3bc7-22d3d12a9709">
      <Execution id="95397aed-85b7-4048-b62f-267d8e01f301" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests" name="DecimalPrecisionRoundTrip" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.Avro_To_RocksDb" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="99e73d35-eff3-a06d-ee12-a6de28a3f795">
      <Execution id="c9e57833-54cc-46e5-9e23-f95967657e57" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests" name="Avro_To_RocksDb" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.DlqIntegrationTests.ForEachAsync_OnErrorDlq_WritesToDlq" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="6dc1c76e-ddda-5058-33dc-fc758c3924b0">
      <Execution id="3564a95e-5290-44a9-9afc-9df916893c05" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.DlqIntegrationTests" name="ForEachAsync_OnErrorDlq_WritesToDlq" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.DummyFlagMessageTests.SendAsync_AddsDummyFlagHeader" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="5116377b-e4db-606a-d1c3-12b84ea4bfc0">
      <Execution id="68460c7e-5c8b-48d1-80d0-b0db93ee9c08" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.DummyFlagMessageTests" name="SendAsync_AddsDummyFlagHeader" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.KafkaServiceDownTests.AddAsync_ShouldThrow_WhenKafkaIsDown" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="52a48a8d-aaad-2671-a532-2ce974e3f69a">
      <Execution id="8028ea64-3e4b-4e83-811c-de8223abee3a" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.KafkaServiceDownTests" name="AddAsync_ShouldThrow_WhenKafkaIsDown" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_TolerantTests.EX01_AddAsync_KafkaDown_ShouldFailGracefully" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="e7664d42-1a36-a709-59e4-00b5e1d7cc8f">
      <Execution id="48a28fa7-7b59-4daf-848a-8c808ca554ad" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_TolerantTests" name="EX01_AddAsync_KafkaDown_ShouldFailGracefully" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.InvalidQueryTests.GeneratedQuery_IsRejected(ksql: &quot;SELECT CASE WHEN ID=1 THEN 'A' ELSE 2 END FROM ORD&quot;···)" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="575bb240-2c56-ce42-7c0d-fdfabac2a9c7">
      <Execution id="daaa9818-501c-4fc1-99ff-5596ba665c7d" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.InvalidQueryTests" name="GeneratedQuery_IsRejected" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.PortConnectivityTests.Kafka_Broker_Should_Be_Reachable" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="eecbfec5-a063-51de-d5b7-85d66f3da2a2">
      <Execution id="a7bd8ff9-893d-42db-97f5-c168fd50e935" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.PortConnectivityTests" name="Kafka_Broker_Should_Be_Reachable" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.Bytes_To_RocksDb" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="b2f10166-e5ea-0765-10ef-c5e28910aacf">
      <Execution id="7533c64f-b1a6-42e6-851a-5da259d13a3e" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests" name="Bytes_To_RocksDb" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.AvroKey_To_RocksDb" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="df528fe1-0ce1-88e8-82f8-8c3a1b02c21b">
      <Execution id="8c0587c2-1fb0-4c33-8269-cd01304fa421" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests" name="AvroKey_To_RocksDb" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.DefaultValuesRoundTrip" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="f1c03cea-0557-e281-789b-44a1e9e61d2d">
      <Execution id="748dfa26-4166-44a4-8219-5e0a08b52443" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests" name="DefaultValuesRoundTrip" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.NoKeyPocoTests.SendAndReceive_NoKeyRecord" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="f4acc4e9-4e3f-fa27-9e40-28a744927795">
      <Execution id="8d67482f-4631-4dc7-be1a-6bd357a0a07d" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.NoKeyPocoTests" name="SendAndReceive_NoKeyRecord" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.SchemaRegistryResetTests.Setup_ShouldRegisterAllSchemas" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="173a5c6a-39b7-895e-9b5a-1e15dc155fed">
      <Execution id="72db2781-1acf-43de-9a05-7e1300cca4b4" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.SchemaRegistryResetTests" name="Setup_ShouldRegisterAllSchemas" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.BoundaryValuesRoundTrip" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="35c33335-3c6f-41c6-e0cd-a71e8b0b3178">
      <Execution id="9029dd3f-8444-4b3e-bf63-a345be6bcffc" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests" name="BoundaryValuesRoundTrip" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.InvalidQueryTests.GeneratedQuery_IsRejected(ksql: &quot;SELECT ID, COUNT(*) FROM ORDERS GROUP BY ID;&quot;)" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="ad9ac948-5de9-3016-dc11-7e1e0ddb9a1f">
      <Execution id="801fbd5c-1ca7-4b03-90f3-686531da8d33" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.InvalidQueryTests" name="GeneratedQuery_IsRejected" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.SchemaNameCaseSensitivityTests.LowercaseField_ShouldSucceed" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="5917e101-0acb-1110-36fc-a2e3d83d03f6">
      <Execution id="0d569881-b15a-410c-9c43-b55d4e07e40a" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.SchemaNameCaseSensitivityTests" name="LowercaseField_ShouldSucceed" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.JoinIntegrationTests.TwoTableJoin_Query_ShouldBeValid" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="ce6a13c7-e84b-fd4c-062d-d534410ea237">
      <Execution id="fbda5ffe-94e0-41c0-8393-0eadb9885db5" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.JoinIntegrationTests" name="TwoTableJoin_Query_ShouldBeValid" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.SchemaRegistryResetTests.UpperCaseSubjects_ShouldNotExist" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="2a812374-63bf-e2f9-3af2-1f33d0b7af6d">
      <Execution id="be1a883d-2bde-4113-ace5-f46b65e29f6c" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.SchemaRegistryResetTests" name="UpperCaseSubjects_ShouldNotExist" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_TolerantTests.EX01_ForeachAsync_KafkaDown_ShouldFailGracefully" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="fa46f409-6539-d06f-aa37-8cfd2c4998c0">
      <Execution id="0d863e3a-816f-4600-b33b-5ab5c6066295" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_TolerantTests" name="EX01_ForeachAsync_KafkaDown_ShouldFailGracefully" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_StrictTests.EX02_ForeachAsync_KafkaDown_ShouldLogAndTimeout" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="6288fb0e-9d2c-a603-9db2-af88d05ffb27">
      <Execution id="a265971d-676b-44bc-a4fb-9c5140c215c9" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_StrictTests" name="EX02_ForeachAsync_KafkaDown_ShouldLogAndTimeout" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.PortConnectivityTests.SchemaRegistry_Should_Be_Reachable" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="8f34b762-931b-3785-315c-8c6659ecd632">
      <Execution id="6cd660a0-a424-4a1a-b46d-42f55d9ff445" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.PortConnectivityTests" name="SchemaRegistry_Should_Be_Reachable" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.KafkaConnectivityTests.ProducerConsumer_RoundTrip" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="e6ab55d5-38d6-0580-e5b0-7764a0bff5a2">
      <Execution id="ce81004e-0a75-44c2-85d5-de1a41ab1f8e" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.KafkaConnectivityTests" name="ProducerConsumer_RoundTrip" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.CompositeKeyPocoTests.SendAndReceive_CompositeKeyPoco" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="4d1ab506-de68-e93b-e77a-c25236b29b8f">
      <Execution id="71794044-56c0-4f84-b51b-8746036d5aa7" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.CompositeKeyPocoTests" name="SendAndReceive_CompositeKeyPoco" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.DummyFlagSchemaRecognitionTests.DummyMessages_EnableQueries" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="94666fe8-200f-47ec-05d3-966f9f35b2a6">
      <Execution id="284d30ec-5e4d-4085-9304-7353b4a92b7c" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.DummyFlagSchemaRecognitionTests" name="DummyMessages_EnableQueries" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.KsqlSyntaxTests.GeneratedQuery_IsValidInKsqlDb(ksql: &quot;CREATE STREAM test_stream AS SELECT * FROM source &quot;···)" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="1b9a7b5c-1c73-929c-a65b-b3bb50e359bc">
      <Execution id="04bfa6ad-a728-4c34-b5b6-4b3fb811dda9" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.KsqlSyntaxTests" name="GeneratedQuery_IsValidInKsqlDb" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.AvroKeyValueDifferentTypes2_To_RocksDb" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="4ba24a6f-994e-4815-d268-26e08ccb87d5">
      <Execution id="68291d7b-f09f-4860-a262-f2ab132c6139" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests" name="AvroKeyValueDifferentTypes2_To_RocksDb" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.AdvancedDataTypeTests.Decimal_DateTime_Enum_RoundTrip" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="1f670e60-a460-2f7f-dd56-948a1c5191c3">
      <Execution id="2f4bad4e-a517-4fbe-a7d7-7a0464766bf2" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.AdvancedDataTypeTests" name="Decimal_DateTime_Enum_RoundTrip" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.KsqlSyntaxTests.GeneratedQuery_IsValidInKsqlDb(ksql: &quot;SELECT CustomerId, COUNT(*) FROM orders GROUP BY C&quot;···)" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="4a90876b-2734-76cc-4f62-bf397a2e6c64">
      <Execution id="cc77328b-6f9d-4bf4-9a34-bcfa29accf90" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.KsqlSyntaxTests" name="GeneratedQuery_IsValidInKsqlDb" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.AvroKeyValueDifferentTypes_To_RocksDb" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="cc8abef5-dd5f-24f8-0952-fe9919df9349">
      <Execution id="db57791b-46c7-4864-b3e2-036eb1cc6c45" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests" name="AvroKeyValueDifferentTypes_To_RocksDb" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.SchemaRegistryResetTests.DuplicateSchemaRegistration_ShouldSucceed" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="6ad00dfe-e135-6dc8-b1bf-666fa5fa3455">
      <Execution id="7d68f094-59de-4580-bc9a-d99b83b9535c" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.SchemaRegistryResetTests" name="DuplicateSchemaRegistration_ShouldSucceed" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.CheckTest1.TestShouldRun" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="25efd5e6-c45b-fc2a-05b1-998773bc2c67">
      <Execution id="5d355540-cdd8-420e-8747-11fc5e6825b5" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.CheckTest1" name="TestShouldRun" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.PrimingBehaviorTests.AlwaysPriming_DoesNotLeakIntoConsumption" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="1efd2b35-e074-3119-cb38-1db783196bee">
      <Execution id="3cf089d5-ef57-489b-82cc-14404c294d47" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.PrimingBehaviorTests" name="AlwaysPriming_DoesNotLeakIntoConsumption" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.KsqlDbServiceDownTests.ExecuteStatement_ShouldFail_WhenKsqlDbDown" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="ccf2bf61-9a31-6941-50d4-73c008678752">
      <Execution id="fc096ece-2c0f-4dba-803c-191404cdb82b" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.KsqlDbServiceDownTests" name="ExecuteStatement_ShouldFail_WhenKsqlDbDown" />
    </UnitTest>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.PortConnectivityTests.KsqlDb_Should_Be_Reachable" storage="/mnt/c/dev/rc02/physicaltests/bin/debug/net8.0/kafka.ksql.linq.tests.integration.dll" id="e4cc62b9-b52c-9218-2bc8-d3fac82e021d">
      <Execution id="83e26442-a1e6-4d8b-aa23-92168a8950b1" />
      <TestMethod codeBase="/mnt/c/dev/rc02/physicalTests/bin/Debug/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.PortConnectivityTests" name="KsqlDb_Should_Be_Reachable" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="f1c03cea-0557-e281-789b-44a1e9e61d2d" executionId="748dfa26-4166-44a4-8219-5e0a08b52443" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="25efd5e6-c45b-fc2a-05b1-998773bc2c67" executionId="5d355540-cdd8-420e-8747-11fc5e6825b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eecbfec5-a063-51de-d5b7-85d66f3da2a2" executionId="a7bd8ff9-893d-42db-97f5-c168fd50e935" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17213b85-711d-b805-3bc7-22d3d12a9709" executionId="95397aed-85b7-4048-b62f-267d8e01f301" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f670e60-a460-2f7f-dd56-948a1c5191c3" executionId="2f4bad4e-a517-4fbe-a7d7-7a0464766bf2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="52a48a8d-aaad-2671-a532-2ce974e3f69a" executionId="8028ea64-3e4b-4e83-811c-de8223abee3a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="da24b4ec-31be-e42d-feb9-6cc309431547" executionId="baead8ae-71ab-45ab-997d-a1f6ce0b8e97" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e6ab55d5-38d6-0580-e5b0-7764a0bff5a2" executionId="ce81004e-0a75-44c2-85d5-de1a41ab1f8e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1b9a7b5c-1c73-929c-a65b-b3bb50e359bc" executionId="04bfa6ad-a728-4c34-b5b6-4b3fb811dda9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2a812374-63bf-e2f9-3af2-1f33d0b7af6d" executionId="be1a883d-2bde-4113-ace5-f46b65e29f6c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4ba24a6f-994e-4815-d268-26e08ccb87d5" executionId="68291d7b-f09f-4860-a262-f2ab132c6139" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="575bb240-2c56-ce42-7c0d-fdfabac2a9c7" executionId="daaa9818-501c-4fc1-99ff-5596ba665c7d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d1ab506-de68-e93b-e77a-c25236b29b8f" executionId="71794044-56c0-4f84-b51b-8746036d5aa7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6dc1c76e-ddda-5058-33dc-fc758c3924b0" executionId="3564a95e-5290-44a9-9afc-9df916893c05" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="94666fe8-200f-47ec-05d3-966f9f35b2a6" executionId="284d30ec-5e4d-4085-9304-7353b4a92b7c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1efd2b35-e074-3119-cb38-1db783196bee" executionId="3cf089d5-ef57-489b-82cc-14404c294d47" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f34b762-931b-3785-315c-8c6659ecd632" executionId="6cd660a0-a424-4a1a-b46d-42f55d9ff445" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fa46f409-6539-d06f-aa37-8cfd2c4998c0" executionId="0d863e3a-816f-4600-b33b-5ab5c6066295" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5917e101-0acb-1110-36fc-a2e3d83d03f6" executionId="0d569881-b15a-410c-9c43-b55d4e07e40a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e4cc62b9-b52c-9218-2bc8-d3fac82e021d" executionId="83e26442-a1e6-4d8b-aa23-92168a8950b1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f4acc4e9-4e3f-fa27-9e40-28a744927795" executionId="8d67482f-4631-4dc7-be1a-6bd357a0a07d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6ad00dfe-e135-6dc8-b1bf-666fa5fa3455" executionId="7d68f094-59de-4580-bc9a-d99b83b9535c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="173a5c6a-39b7-895e-9b5a-1e15dc155fed" executionId="72db2781-1acf-43de-9a05-7e1300cca4b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="35c33335-3c6f-41c6-e0cd-a71e8b0b3178" executionId="9029dd3f-8444-4b3e-bf63-a345be6bcffc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="821b062e-05e6-7b61-70b6-a85ab6158b98" executionId="f1f7be02-98c1-44fa-95c3-fa554026df5e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="df016763-3c38-6299-bd82-3419be01b352" executionId="c8b9efaf-c7a0-4492-9d99-1dfd6014e7b2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6e9b6ef9-ac09-772f-de65-0a61c351b479" executionId="d2f97a53-2890-4966-a39c-bdb89c07caf8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6288fb0e-9d2c-a603-9db2-af88d05ffb27" executionId="a265971d-676b-44bc-a4fb-9c5140c215c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ccf2bf61-9a31-6941-50d4-73c008678752" executionId="fc096ece-2c0f-4dba-803c-191404cdb82b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ad9ac948-5de9-3016-dc11-7e1e0ddb9a1f" executionId="801fbd5c-1ca7-4b03-90f3-686531da8d33" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ce6a13c7-e84b-fd4c-062d-d534410ea237" executionId="fbda5ffe-94e0-41c0-8393-0eadb9885db5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e7664d42-1a36-a709-59e4-00b5e1d7cc8f" executionId="48a28fa7-7b59-4daf-848a-8c808ca554ad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="df528fe1-0ce1-88e8-82f8-8c3a1b02c21b" executionId="8c0587c2-1fb0-4c33-8269-cd01304fa421" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5116377b-e4db-606a-d1c3-12b84ea4bfc0" executionId="68460c7e-5c8b-48d1-80d0-b0db93ee9c08" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc8abef5-dd5f-24f8-0952-fe9919df9349" executionId="db57791b-46c7-4864-b3e2-036eb1cc6c45" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4a90876b-2734-76cc-4f62-bf397a2e6c64" executionId="cc77328b-6f9d-4bf4-9a34-bcfa29accf90" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2f10166-e5ea-0765-10ef-c5e28910aacf" executionId="7533c64f-b1a6-42e6-851a-5da259d13a3e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="99e73d35-eff3-a06d-ee12-a6de28a3f795" executionId="c9e57833-54cc-46e5-9e23-f95967657e57" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Failed">
    <Counters total="38" executed="38" passed="21" failed="17" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.5.6+bf9b858c26 (64-bit .NET 8.0.19)
[xUnit.net 00:00:00.23]   Discovering: Kafka.Ksql.Linq.Tests.Integration
[xUnit.net 00:00:00.29]   Discovered:  Kafka.Ksql.Linq.Tests.Integration
[xUnit.net 00:00:00.29]   Starting:    Kafka.Ksql.Linq.Tests.Integration
[xUnit.net 00:00:32.64]       Assert.Single() Failure: The collection contained 3 items
[xUnit.net 00:00:32.64]       Collection: [Record { Created = 2025-08-30T05:41:13.5170000Z, Id = 1, Price = 12.3456 }, Record { Created = 2025-08-30T05:47:16.3110000Z, Id = 1, Price = 12.3456 }, Record { Created = 2025-08-30T05:55:24.8040000Z, Id = 1, Price = 12.3456 }]
[xUnit.net 00:00:32.64]       Stack Trace:
[xUnit.net 00:00:32.64]         /mnt/c/dev/rc02/physicalTests/OssSamples/AdvancedDataTypeTests.cs(77,0): at Kafka.Ksql.Linq.Tests.Integration.AdvancedDataTypeTests.Decimal_DateTime_Enum_RoundTrip()
[xUnit.net 00:00:32.64]         /mnt/c/dev/rc02/physicalTests/OssSamples/AdvancedDataTypeTests.cs(79,0): at Kafka.Ksql.Linq.Tests.Integration.AdvancedDataTypeTests.Decimal_DateTime_Enum_RoundTrip()
[xUnit.net 00:00:32.64]         --- End of stack trace from previous location ---
[xUnit.net 00:00:52.73]       Confluent.SchemaRegistry.SchemaRegistryException : Schema being registered is incompatible with an earlier schema for subject "orders-key", details: [{errorType:'NAME_MISMATCH', description:'The name of the schema has changed (path '/name')', additionalInfo:'expected: DummyRecord'}, {oldSchemaVersion: 1}, {oldSchema: '{"type":"record","name":"DummyRecord","fields":[{"name":"x","type":"string"}]}'}, {compatibility: 'BACKWARD'}]; error code: 409
[xUnit.net 00:00:52.73]       Stack Trace:
[xUnit.net 00:00:52.73]            at Confluent.SchemaRegistry.RestService.ExecuteOnOneInstanceAsync(Func`1 createRequest)
[xUnit.net 00:00:52.73]            at Confluent.SchemaRegistry.RestService.RequestAsync[T](String endPoint, HttpMethod method, Object[] jsonBody)
[xUnit.net 00:00:52.73]            at Confluent.SchemaRegistry.RestService.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:00:52.73]            at Confluent.Shared.CollectionUtils.ConcurrentDictionaryExtensions.GetOrAddAsync[TKey,TValue](ConcurrentDictionary`2 dictionary, TKey key, Func`2 valueFactory)
[xUnit.net 00:00:52.73]            at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:00:52.73]            at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:00:52.73]         /mnt/c/dev/rc02/src/SchemaRegistryTools/SchemaRegistryExtensions.cs(36,0): at Kafka.Ksql.Linq.SchemaRegistryTools.SchemaRegistryExtensions.RegisterSchemaIfNewAsync(ISchemaRegistryClient client, String subject, String schema)
[xUnit.net 00:00:52.73]         /mnt/c/dev/rc02/src/KsqlContext.cs(560,0): at Kafka.Ksql.Linq.KsqlContext.RegisterSchemasAndMaterializeAsync()
[xUnit.net 00:00:52.73]         /mnt/c/dev/rc02/src/KsqlContext.cs(489,0): at Kafka.Ksql.Linq.KsqlContext.InitializeWithSchemaRegistration()
[xUnit.net 00:00:52.73]         /mnt/c/dev/rc02/src/KsqlContext.cs(129,0): at Kafka.Ksql.Linq.KsqlContext.InitializeCore(ILoggerFactory loggerFactory)
[xUnit.net 00:00:52.73]         /mnt/c/dev/rc02/src/KsqlContext.cs(94,0): at Kafka.Ksql.Linq.KsqlContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory)
[xUnit.net 00:00:52.73]         /mnt/c/dev/rc02/physicalTests/OssSamples/CompositeKeyPocoTests.cs(23,0): at Kafka.Ksql.Linq.Tests.Integration.CompositeKeyPocoTests.OrderContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory)
[xUnit.net 00:00:52.73]         /mnt/c/dev/rc02/physicalTests/OssSamples/CompositeKeyPocoTests.cs(54,0): at Kafka.Ksql.Linq.Tests.Integration.CompositeKeyPocoTests.SendAndReceive_CompositeKeyPoco()
[xUnit.net 00:00:52.73]         --- End of stack trace from previous location ---
[xUnit.net 00:01:09.72]       Assert.Single() Failure: The collection was empty
[xUnit.net 00:01:09.72]       Stack Trace:
[xUnit.net 00:01:09.72]         /mnt/c/dev/rc02/physicalTests/OssSamples/DefaultAndBoundaryValueTests.cs(98,0): at Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.DefaultValuesRoundTrip()
[xUnit.net 00:01:09.72]         /mnt/c/dev/rc02/physicalTests/OssSamples/DefaultAndBoundaryValueTests.cs(107,0): at Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.DefaultValuesRoundTrip()
[xUnit.net 00:01:09.72]         --- End of stack trace from previous location ---
[xUnit.net 00:01:25.61]       Assert.Equal() Failure: Values differ
[xUnit.net 00:01:25.61]       Expected: 4
[xUnit.net 00:01:25.61]       Actual:   0
[xUnit.net 00:01:25.61]       Stack Trace:
[xUnit.net 00:01:25.61]         /mnt/c/dev/rc02/physicalTests/OssSamples/DefaultAndBoundaryValueTests.cs(135,0): at Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.DecimalPrecisionRoundTrip()
[xUnit.net 00:01:25.61]         /mnt/c/dev/rc02/physicalTests/OssSamples/DefaultAndBoundaryValueTests.cs(136,0): at Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.DecimalPrecisionRoundTrip()
[xUnit.net 00:01:25.61]         --- End of stack trace from previous location ---
[xUnit.net 00:01:43.44]       Assert.Equal() Failure: Values differ
[xUnit.net 00:01:43.44]       Expected: 2
[xUnit.net 00:01:43.44]       Actual:   0
[xUnit.net 00:01:43.44]       Stack Trace:
[xUnit.net 00:01:43.44]         /mnt/c/dev/rc02/physicalTests/OssSamples/DefaultAndBoundaryValueTests.cs(187,0): at Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.BoundaryValuesRoundTrip()
[xUnit.net 00:01:43.44]         /mnt/c/dev/rc02/physicalTests/OssSamples/DefaultAndBoundaryValueTests.cs(188,0): at Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.BoundaryValuesRoundTrip()
[xUnit.net 00:01:43.44]         --- End of stack trace from previous location ---
[xUnit.net 00:01:55.81]       Confluent.SchemaRegistry.SchemaRegistryException : Schema being registered is incompatible with an earlier schema for subject "orders-value", details: [{errorType:'NAME_MISMATCH', description:'The name of the schema has changed (path '/name')', additionalInfo:'expected: DummyRecord'}, {errorType:'READER_FIELD_MISSING_DEFAULT_VALUE', description:'The field 'Amount' at path '/fields/1' in the new schema has no default value and is missing in the old schema', additionalInfo:'Amount'}, {oldSchemaVersion: 1}, {oldSchema: '{"type":"record","name":"DummyRecord","fields":[{"name":"x","type":"string"}]}'}, {compatibility: 'BACKWARD'}]; error code: 409
[xUnit.net 00:01:55.81]       Stack Trace:
[xUnit.net 00:01:55.81]            at Confluent.SchemaRegistry.RestService.ExecuteOnOneInstanceAsync(Func`1 createRequest)
[xUnit.net 00:01:55.81]            at Confluent.SchemaRegistry.RestService.RequestAsync[T](String endPoint, HttpMethod method, Object[] jsonBody)
[xUnit.net 00:01:55.81]            at Confluent.SchemaRegistry.RestService.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:01:55.81]            at Confluent.Shared.CollectionUtils.ConcurrentDictionaryExtensions.GetOrAddAsync[TKey,TValue](ConcurrentDictionary`2 dictionary, TKey key, Func`2 valueFactory)
[xUnit.net 00:01:55.81]            at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:01:55.81]            at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:01:55.81]         /mnt/c/dev/rc02/src/SchemaRegistryTools/SchemaRegistryExtensions.cs(36,0): at Kafka.Ksql.Linq.SchemaRegistryTools.SchemaRegistryExtensions.RegisterSchemaIfNewAsync(ISchemaRegistryClient client, String subject, String schema)
[xUnit.net 00:01:55.81]         /mnt/c/dev/rc02/src/KsqlContext.cs(565,0): at Kafka.Ksql.Linq.KsqlContext.RegisterSchemasAndMaterializeAsync()
[xUnit.net 00:01:55.81]         /mnt/c/dev/rc02/src/KsqlContext.cs(489,0): at Kafka.Ksql.Linq.KsqlContext.InitializeWithSchemaRegistration()
[xUnit.net 00:01:55.81]         /mnt/c/dev/rc02/src/KsqlContext.cs(129,0): at Kafka.Ksql.Linq.KsqlContext.InitializeCore(ILoggerFactory loggerFactory)
[xUnit.net 00:01:55.81]         /mnt/c/dev/rc02/src/KsqlContext.cs(94,0): at Kafka.Ksql.Linq.KsqlContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory)
[xUnit.net 00:01:55.81]         /mnt/c/dev/rc02/physicalTests/OssSamples/DlqIntegrationTests.cs(32,0): at Kafka.Ksql.Linq.Tests.Integration.DlqIntegrationTests.OrderContext..ctor(KsqlDslOptions options)
[xUnit.net 00:01:55.81]         /mnt/c/dev/rc02/physicalTests/OssSamples/DlqIntegrationTests.cs(55,0): at Kafka.Ksql.Linq.Tests.Integration.DlqIntegrationTests.ForEachAsync_OnErrorDlq_WritesToDlq()
[xUnit.net 00:01:55.81]         --- End of stack trace from previous location ---
[xUnit.net 00:02:10.19]       Confluent.SchemaRegistry.SchemaRegistryException : Schema being registered is incompatible with an earlier schema for subject "orders-value", details: [{errorType:'NAME_MISMATCH', description:'The name of the schema has changed (path '/name')', additionalInfo:'expected: DummyRecord'}, {errorType:'READER_FIELD_MISSING_DEFAULT_VALUE', description:'The field 'Amount' at path '/fields/1' in the new schema has no default value and is missing in the old schema', additionalInfo:'Amount'}, {oldSchemaVersion: 1}, {oldSchema: '{"type":"record","name":"DummyRecord","fields":[{"name":"x","type":"string"}]}'}, {compatibility: 'BACKWARD'}]; error code: 409
[xUnit.net 00:02:10.19]       Stack Trace:
[xUnit.net 00:02:10.19]            at Confluent.SchemaRegistry.RestService.ExecuteOnOneInstanceAsync(Func`1 createRequest)
[xUnit.net 00:02:10.19]            at Confluent.SchemaRegistry.RestService.RequestAsync[T](String endPoint, HttpMethod method, Object[] jsonBody)
[xUnit.net 00:02:10.19]            at Confluent.SchemaRegistry.RestService.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:02:10.19]            at Confluent.Shared.CollectionUtils.ConcurrentDictionaryExtensions.GetOrAddAsync[TKey,TValue](ConcurrentDictionary`2 dictionary, TKey key, Func`2 valueFactory)
[xUnit.net 00:02:10.19]            at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:02:10.19]            at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:02:10.19]         /mnt/c/dev/rc02/src/SchemaRegistryTools/SchemaRegistryExtensions.cs(36,0): at Kafka.Ksql.Linq.SchemaRegistryTools.SchemaRegistryExtensions.RegisterSchemaIfNewAsync(ISchemaRegistryClient client, String subject, String schema)
[xUnit.net 00:02:10.19]         /mnt/c/dev/rc02/src/KsqlContext.cs(565,0): at Kafka.Ksql.Linq.KsqlContext.RegisterSchemasAndMaterializeAsync()
[xUnit.net 00:02:10.19]         /mnt/c/dev/rc02/src/KsqlContext.cs(489,0): at Kafka.Ksql.Linq.KsqlContext.InitializeWithSchemaRegistration()
[xUnit.net 00:02:10.19]         /mnt/c/dev/rc02/src/KsqlContext.cs(129,0): at Kafka.Ksql.Linq.KsqlContext.InitializeCore(ILoggerFactory loggerFactory)
[xUnit.net 00:02:10.19]         /mnt/c/dev/rc02/src/KsqlContext.cs(94,0): at Kafka.Ksql.Linq.KsqlContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory)
[xUnit.net 00:02:10.19]         /mnt/c/dev/rc02/physicalTests/OssSamples/DummyFlagMessageTests.cs(39,0): at Kafka.Ksql.Linq.Tests.Integration.DummyFlagMessageTests.DummyContext..ctor(KsqlDslOptions options)
[xUnit.net 00:02:10.19]         /mnt/c/dev/rc02/physicalTests/OssSamples/DummyFlagMessageTests.cs(67,0): at Kafka.Ksql.Linq.Tests.Integration.DummyFlagMessageTests.SendAsync_AddsDummyFlagHeader()
[xUnit.net 00:02:10.19]         --- End of stack trace from previous location ---
[xUnit.net 00:02:30.52]       System.NullReferenceException : Object reference not set to an instance of an object.
[xUnit.net 00:02:30.52]       Stack Trace:
[xUnit.net 00:02:30.52]         /mnt/c/dev/rc02/physicalTests/OssSamples/ManualCommitIntegrationTests.cs(89,0): at Kafka.Ksql.Linq.Tests.Integration.ManualCommitIntegrationTests.ManualCommit_PersistsOffset()
[xUnit.net 00:02:30.52]         /mnt/c/dev/rc02/physicalTests/OssSamples/ManualCommitIntegrationTests.cs(90,0): at Kafka.Ksql.Linq.Tests.Integration.ManualCommitIntegrationTests.ManualCommit_PersistsOffset()
[xUnit.net 00:02:30.52]         --- End of stack trace from previous location ---
[xUnit.net 00:02:55.43]       Assert.Single() Failure: The collection contained 3 items
[xUnit.net 00:02:55.43]       Collection: [Record { Id = 1, Name = "alice" }, Record { Id = 1, Name = "alice" }, Record { Id = 1, Name = "alice" }]
[xUnit.net 00:02:55.43]       Stack Trace:
[xUnit.net 00:02:55.43]         /mnt/c/dev/rc02/physicalTests/OssSamples/NoKeyPocoTests.cs(65,0): at Kafka.Ksql.Linq.Tests.Integration.NoKeyPocoTests.SendAndReceive_NoKeyRecord()
[xUnit.net 00:02:55.43]         /mnt/c/dev/rc02/physicalTests/OssSamples/NoKeyPocoTests.cs(69,0): at Kafka.Ksql.Linq.Tests.Integration.NoKeyPocoTests.SendAndReceive_NoKeyRecord()
[xUnit.net 00:02:55.43]         --- End of stack trace from previous location ---
[xUnit.net 00:03:27.72]       Confluent.SchemaRegistry.SchemaRegistryException : Schema being registered is incompatible with an earlier schema for subject "orders-value", details: [{errorType:'NAME_MISMATCH', description:'The name of the schema has changed (path '/name')', additionalInfo:'expected: DummyRecord'}, {errorType:'READER_FIELD_MISSING_DEFAULT_VALUE', description:'The field 'Amount' at path '/fields/1' in the new schema has no default value and is missing in the old schema', additionalInfo:'Amount'}, {oldSchemaVersion: 1}, {oldSchema: '{"type":"record","name":"DummyRecord","fields":[{"name":"x","type":"string"}]}'}, {compatibility: 'BACKWARD'}]; error code: 409
[xUnit.net 00:03:27.72]       Stack Trace:
[xUnit.net 00:03:27.72]            at Confluent.SchemaRegistry.RestService.ExecuteOnOneInstanceAsync(Func`1 createRequest)
[xUnit.net 00:03:27.72]            at Confluent.SchemaRegistry.RestService.RequestAsync[T](String endPoint, HttpMethod method, Object[] jsonBody)
[xUnit.net 00:03:27.72]            at Confluent.SchemaRegistry.RestService.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:03:27.72]            at Confluent.Shared.CollectionUtils.ConcurrentDictionaryExtensions.GetOrAddAsync[TKey,TValue](ConcurrentDictionary`2 dictionary, TKey key, Func`2 valueFactory)
[xUnit.net 00:03:27.72]            at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:03:27.72]            at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:03:27.72]         /mnt/c/dev/rc02/src/SchemaRegistryTools/SchemaRegistryExtensions.cs(36,0): at Kafka.Ksql.Linq.SchemaRegistryTools.SchemaRegistryExtensions.RegisterSchemaIfNewAsync(ISchemaRegistryClient client, String subject, String schema)
[xUnit.net 00:03:27.72]         /mnt/c/dev/rc02/src/KsqlContext.cs(565,0): at Kafka.Ksql.Linq.KsqlContext.RegisterSchemasAndMaterializeAsync()
[xUnit.net 00:03:27.72]         /mnt/c/dev/rc02/src/KsqlContext.cs(489,0): at Kafka.Ksql.Linq.KsqlContext.InitializeWithSchemaRegistration()
[xUnit.net 00:03:27.72]         /mnt/c/dev/rc02/src/KsqlContext.cs(129,0): at Kafka.Ksql.Linq.KsqlContext.InitializeCore(ILoggerFactory loggerFactory)
[xUnit.net 00:03:27.72]         /mnt/c/dev/rc02/src/KsqlContext.cs(94,0): at Kafka.Ksql.Linq.KsqlContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory)
[xUnit.net 00:03:27.72]         /mnt/c/dev/rc02/physicalTests/OssSamples/SchemaNameCaseSensitivityTests.cs(36,0): at Kafka.Ksql.Linq.Tests.Integration.SchemaNameCaseSensitivityTests.OrderContext..ctor(KsqlDslOptions options)
[xUnit.net 00:03:27.72]         /mnt/c/dev/rc02/physicalTests/OssSamples/SchemaNameCaseSensitivityTests.cs(67,0): at Kafka.Ksql.Linq.Tests.Integration.SchemaNameCaseSensitivityTests.LowercaseField_ShouldSucceed()
[xUnit.net 00:03:27.72]         --- End of stack trace from previous location ---
[xUnit.net 00:03:32.32]       Unexpected exception: System.ArgumentException: Object of type 'System.Double' cannot be converted to type 'Avro.AvroDecimal'.
[xUnit.net 00:03:32.32]       Stack Trace:
[xUnit.net 00:03:32.32]         /mnt/c/dev/rc02/physicalTests/Connectivity/BigBang_KafkaConnection_StrictTests.cs(61,0): at Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_StrictTests.EX02_AddAsync_KafkaDown_ShouldLogAndTimeout()
[xUnit.net 00:03:32.32]         /mnt/c/dev/rc02/physicalTests/Connectivity/BigBang_KafkaConnection_StrictTests.cs(61,0): at Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_StrictTests.EX02_AddAsync_KafkaDown_ShouldLogAndTimeout()
[xUnit.net 00:03:32.32]         --- End of stack trace from previous location ---
[xUnit.net 00:03:34.09]       Unexpected exception: System.ArgumentException: Object of type 'System.Double' cannot be converted to type 'Avro.AvroDecimal'.
[xUnit.net 00:03:34.09]       Stack Trace:
[xUnit.net 00:03:34.09]         /mnt/c/dev/rc02/physicalTests/Connectivity/BigBang_KafkaConnection_TolerantTests.cs(55,0): at Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_TolerantTests.EX01_AddAsync_KafkaDown_ShouldFailGracefully()
[xUnit.net 00:03:34.09]         /mnt/c/dev/rc02/physicalTests/Connectivity/BigBang_KafkaConnection_TolerantTests.cs(55,0): at Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_TolerantTests.EX01_AddAsync_KafkaDown_ShouldFailGracefully()
[xUnit.net 00:03:34.09]         --- End of stack trace from previous location ---
[xUnit.net 00:05:44.68]       System.TimeoutException : Kafka not reachable at localhost:9092
[xUnit.net 00:05:44.68]       Stack Trace:
[xUnit.net 00:05:44.68]         /mnt/c/dev/rc02/physicalTests/Env/Health.cs(25,0): at PhysicalTestEnv.Health.WaitForKafkaAsync(String bootstrapServers, Nullable`1 timeout)
[xUnit.net 00:05:44.68]         /mnt/c/dev/rc02/physicalTests/Connectivity/KafkaConnectivityTests.cs(90,0): at Kafka.Ksql.Linq.Tests.Integration.EnvKafkaConnectivityTests.SetupAsync()
[xUnit.net 00:05:44.68]         /mnt/c/dev/rc02/physicalTests/Connectivity/KafkaConnectivityTests.cs(18,0): at Kafka.Ksql.Linq.Tests.Integration.KafkaConnectivityTests.ProducerConsumer_RoundTrip()
[xUnit.net 00:05:44.68]         --- End of stack trace from previous location ---
[xUnit.net 00:06:04.00]       Unexpected exception type/message. Got System.ArgumentException: Object of type 'System.Double' cannot be converted to type 'Avro.AvroDecimal'.
[xUnit.net 00:06:04.00]       Stack Trace:
[xUnit.net 00:06:04.00]         /mnt/c/dev/rc02/physicalTests/Connectivity/KafkaServiceDownTests.cs(71,0): at Kafka.Ksql.Linq.Tests.Integration.KafkaServiceDownTests.AddAsync_ShouldThrow_WhenKafkaIsDown()
[xUnit.net 00:06:04.00]         /mnt/c/dev/rc02/physicalTests/Connectivity/KafkaServiceDownTests.cs(77,0): at Kafka.Ksql.Linq.Tests.Integration.KafkaServiceDownTests.AddAsync_ShouldThrow_WhenKafkaIsDown()
[xUnit.net 00:06:04.00]         --- End of stack trace from previous location ---
[xUnit.net 00:06:58.74]       Confluent.SchemaRegistry.SchemaRegistryException : Schema being registered is incompatible with an earlier schema for subject "customers-value", details: [{errorType:'NAME_MISMATCH', description:'The name of the schema has changed (path '/name')', additionalInfo:'expected: DummyRecord'}, {oldSchemaVersion: 1}, {oldSchema: '{"type":"record","name":"DummyRecord","fields":[{"name":"x","type":"string"}]}'}, {compatibility: 'BACKWARD'}]; error code: 409
[xUnit.net 00:06:58.74]       Stack Trace:
[xUnit.net 00:06:58.74]            at Confluent.SchemaRegistry.RestService.ExecuteOnOneInstanceAsync(Func`1 createRequest)
[xUnit.net 00:06:58.74]            at Confluent.SchemaRegistry.RestService.RequestAsync[T](String endPoint, HttpMethod method, Object[] jsonBody)
[xUnit.net 00:06:58.74]            at Confluent.SchemaRegistry.RestService.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:06:58.74]            at Confluent.Shared.CollectionUtils.ConcurrentDictionaryExtensions.GetOrAddAsync[TKey,TValue](ConcurrentDictionary`2 dictionary, TKey key, Func`2 valueFactory)
[xUnit.net 00:06:58.74]            at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:06:58.74]            at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:06:58.74]         /mnt/c/dev/rc02/src/SchemaRegistryTools/SchemaRegistryExtensions.cs(36,0): at Kafka.Ksql.Linq.SchemaRegistryTools.SchemaRegistryExtensions.RegisterSchemaIfNewAsync(ISchemaRegistryClient client, String subject, String schema)
[xUnit.net 00:06:58.74]         /mnt/c/dev/rc02/src/KsqlContext.cs(565,0): at Kafka.Ksql.Linq.KsqlContext.RegisterSchemasAndMaterializeAsync()
[xUnit.net 00:06:58.74]         /mnt/c/dev/rc02/src/KsqlContext.cs(489,0): at Kafka.Ksql.Linq.KsqlContext.InitializeWithSchemaRegistration()
[xUnit.net 00:06:58.74]         /mnt/c/dev/rc02/src/KsqlContext.cs(129,0): at Kafka.Ksql.Linq.KsqlContext.InitializeCore(ILoggerFactory loggerFactory)
[xUnit.net 00:06:58.74]         /mnt/c/dev/rc02/src/KsqlContext.cs(94,0): at Kafka.Ksql.Linq.KsqlContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory)
[xUnit.net 00:06:58.74]         /mnt/c/dev/rc02/physicalTests/OssSamples/DummyFlagSchemaRecognitionTests.cs(66,0): at Kafka.Ksql.Linq.Tests.Integration.DummyFlagSchemaRecognitionTests.DummyContext..ctor(KsqlDslOptions options)
[xUnit.net 00:06:58.74]         /mnt/c/dev/rc02/physicalTests/OssSamples/DummyFlagSchemaRecognitionTests.cs(93,0): at Kafka.Ksql.Linq.Tests.Integration.DummyFlagSchemaRecognitionTests.ProduceDummyRecordsAsync()
[xUnit.net 00:06:58.74]         /mnt/c/dev/rc02/physicalTests/OssSamples/DummyFlagSchemaRecognitionTests.cs(147,0): at Kafka.Ksql.Linq.Tests.Integration.DummyFlagSchemaRecognitionTests.DummyMessages_EnableQueries()
[xUnit.net 00:06:58.74]         --- End of stack trace from previous location ---
[xUnit.net 00:07:13.18]       Confluent.SchemaRegistry.SchemaRegistryException : Schema being registered is incompatible with an earlier schema for subject "orders-value", details: [{errorType:'NAME_MISMATCH', description:'The name of the schema has changed (path '/name')', additionalInfo:'expected: DummyRecord'}, {errorType:'READER_FIELD_MISSING_DEFAULT_VALUE', description:'The field 'Amount' at path '/fields/1' in the new schema has no default value and is missing in the old schema', additionalInfo:'Amount'}, {oldSchemaVersion: 1}, {oldSchema: '{"type":"record","name":"DummyRecord","fields":[{"name":"x","type":"string"}]}'}, {compatibility: 'BACKWARD'}]; error code: 409
[xUnit.net 00:07:13.18]       Stack Trace:
[xUnit.net 00:07:13.18]            at Confluent.SchemaRegistry.RestService.ExecuteOnOneInstanceAsync(Func`1 createRequest)
[xUnit.net 00:07:13.18]            at Confluent.SchemaRegistry.RestService.RequestAsync[T](String endPoint, HttpMethod method, Object[] jsonBody)
[xUnit.net 00:07:13.18]            at Confluent.SchemaRegistry.RestService.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:07:13.18]            at Confluent.Shared.CollectionUtils.ConcurrentDictionaryExtensions.GetOrAddAsync[TKey,TValue](ConcurrentDictionary`2 dictionary, TKey key, Func`2 valueFactory)
[xUnit.net 00:07:13.18]            at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaWithResponseAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:07:13.18]            at Confluent.SchemaRegistry.CachedSchemaRegistryClient.RegisterSchemaAsync(String subject, Schema schema, Boolean normalize)
[xUnit.net 00:07:13.18]         /mnt/c/dev/rc02/src/SchemaRegistryTools/SchemaRegistryExtensions.cs(36,0): at Kafka.Ksql.Linq.SchemaRegistryTools.SchemaRegistryExtensions.RegisterSchemaIfNewAsync(ISchemaRegistryClient client, String subject, String schema)
[xUnit.net 00:07:13.18]         /mnt/c/dev/rc02/src/KsqlContext.cs(565,0): at Kafka.Ksql.Linq.KsqlContext.RegisterSchemasAndMaterializeAsync()
[xUnit.net 00:07:13.18]         /mnt/c/dev/rc02/src/KsqlContext.cs(489,0): at Kafka.Ksql.Linq.KsqlContext.InitializeWithSchemaRegistration()
[xUnit.net 00:07:13.18]         /mnt/c/dev/rc02/src/KsqlContext.cs(129,0): at Kafka.Ksql.Linq.KsqlContext.InitializeCore(ILoggerFactory loggerFactory)
[xUnit.net 00:07:13.18]         /mnt/c/dev/rc02/src/KsqlContext.cs(94,0): at Kafka.Ksql.Linq.KsqlContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory)
[xUnit.net 00:07:13.18]         /mnt/c/dev/rc02/physicalTests/OssSamples/JoinIntegrationTests.cs(39,0): at Kafka.Ksql.Linq.Tests.Integration.JoinIntegrationTests.JoinContext..ctor(KsqlDslOptions options)
[xUnit.net 00:07:13.18]         /mnt/c/dev/rc02/physicalTests/OssSamples/JoinIntegrationTests.cs(69,0): at Kafka.Ksql.Linq.Tests.Integration.JoinIntegrationTests.TwoTableJoin_Query_ShouldBeValid()
[xUnit.net 00:07:13.18]         --- End of stack trace from previous location ---
[xUnit.net 00:08:18.53]       Streamiz.Kafka.Net.Errors.InvalidStateStoreException : The state store, avro-key-different-store, may have migrated to another instance.
[xUnit.net 00:08:18.53]       Stack Trace:
[xUnit.net 00:08:18.53]            at Streamiz.Kafka.Net.State.Internal.QueryableStoreProvider.GetStore[T,K,V](StoreQueryParameters`3 storeQueryParameters)
[xUnit.net 00:08:18.53]            at Streamiz.Kafka.Net.KafkaStream.Store[T,K,V](StoreQueryParameters`3 storeQueryParameters)
[xUnit.net 00:08:18.53]         /mnt/c/dev/rc02/physicalTests/Streamiz/StreamizRocksDbTests.cs(148,0): at Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.RunAvroToRocksDbAsync[TKey,TValue](String topic, String storeName, String applicationId, TKey key, TValue value)
[xUnit.net 00:08:18.53]         /mnt/c/dev/rc02/physicalTests/Streamiz/StreamizRocksDbTests.cs(322,0): at Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.AvroKeyValueDifferentTypes_To_RocksDb()
[xUnit.net 00:08:18.53]         --- End of stack trace from previous location ---
[xUnit.net 00:08:18.53]   Finished:    Kafka.Ksql.Linq.Tests.Integration
</StdOut>
    </Output>
    <RunInfos>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T14:55:40.1457865+09:00">
        <Text>[xUnit.net 00:00:32.63]     Kafka.Ksql.Linq.Tests.Integration.AdvancedDataTypeTests.Decimal_DateTime_Enum_RoundTrip [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T14:55:58.2468735+09:00">
        <Text>[xUnit.net 00:00:52.73]     Kafka.Ksql.Linq.Tests.Integration.CompositeKeyPocoTests.SendAndReceive_CompositeKeyPoco [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T14:56:13.2179393+09:00">
        <Text>[xUnit.net 00:01:09.72]     Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.DefaultValuesRoundTrip [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T14:56:29.1065837+09:00">
        <Text>[xUnit.net 00:01:25.61]     Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.DecimalPrecisionRoundTrip [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T14:56:44.9698653+09:00">
        <Text>[xUnit.net 00:01:43.44]     Kafka.Ksql.Linq.Tests.Integration.DefaultAndBoundaryValueTests.BoundaryValuesRoundTrip [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T14:56:57.3413314+09:00">
        <Text>[xUnit.net 00:01:55.81]     Kafka.Ksql.Linq.Tests.Integration.DlqIntegrationTests.ForEachAsync_OnErrorDlq_WritesToDlq [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T14:57:09.6889275+09:00">
        <Text>[xUnit.net 00:02:10.19]     Kafka.Ksql.Linq.Tests.Integration.DummyFlagMessageTests.SendAsync_AddsDummyFlagHeader [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T14:57:30.0205022+09:00">
        <Text>[xUnit.net 00:02:30.52]     Kafka.Ksql.Linq.Tests.Integration.ManualCommitIntegrationTests.ManualCommit_PersistsOffset [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T14:57:52.9538048+09:00">
        <Text>[xUnit.net 00:02:55.43]     Kafka.Ksql.Linq.Tests.Integration.NoKeyPocoTests.SendAndReceive_NoKeyRecord [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T14:58:23.2206914+09:00">
        <Text>[xUnit.net 00:03:27.72]     Kafka.Ksql.Linq.Tests.Integration.SchemaNameCaseSensitivityTests.LowercaseField_ShouldSucceed [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T14:58:27.8219177+09:00">
        <Text>[xUnit.net 00:03:32.32]     Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_StrictTests.EX02_AddAsync_KafkaDown_ShouldLogAndTimeout [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T14:58:29.5956667+09:00">
        <Text>[xUnit.net 00:03:34.09]     Kafka.Ksql.Linq.Tests.Integration.BigBang_KafkaConnection_TolerantTests.EX01_AddAsync_KafkaDown_ShouldFailGracefully [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T15:00:30.1694724+09:00">
        <Text>[xUnit.net 00:05:44.68]     Kafka.Ksql.Linq.Tests.Integration.KafkaConnectivityTests.ProducerConsumer_RoundTrip [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T15:00:49.4919036+09:00">
        <Text>[xUnit.net 00:06:04.00]     Kafka.Ksql.Linq.Tests.Integration.KafkaServiceDownTests.AddAsync_ShouldThrow_WhenKafkaIsDown [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T15:01:40.2323776+09:00">
        <Text>[xUnit.net 00:06:58.74]     Kafka.Ksql.Linq.Tests.Integration.DummyFlagSchemaRecognitionTests.DummyMessages_EnableQueries [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T15:01:52.6430356+09:00">
        <Text>[xUnit.net 00:07:13.18]     Kafka.Ksql.Linq.Tests.Integration.JoinIntegrationTests.TwoTableJoin_Query_ShouldBeValid [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="sagesoho01" outcome="Error" timestamp="2025-08-30T15:02:53.9874825+09:00">
        <Text>[xUnit.net 00:08:18.53]     Kafka.Ksql.Linq.Tests.Integration.Streamiz.StreamizRocksDbTests.AvroKeyValueDifferentTypes_To_RocksDb [FAIL]</Text>
      </RunInfo>
    </RunInfos>
  </ResultSummary>
</TestRun>