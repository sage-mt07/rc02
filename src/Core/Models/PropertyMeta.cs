using Kafka.Ksql.Linq.Core.Extensions;
using Kafka.Ksql.Linq.Core.Attributes;
using System;
using System.Linq;
using System.Reflection;

namespace Kafka.Ksql.Linq.Core.Models;

/// <summary>
/// Metadata for a single property extracted from POCO definitions.
/// </summary>
public struct PropertyMeta
{
    public string Name { get; init; }
    public string? SourceName { get; init; }
    public Type PropertyType { get; init; }
    public bool IsNullable { get; init; }
    public int? Precision { get; init; }
    public int? Scale { get; init; }
    public string? Format { get; init; }
    public Attribute[] Attributes { get; init; }
    public PropertyInfo? PropertyInfo { get; init; }
    public bool IsAutoGenerated { get; init; }

    public static PropertyMeta FromProperty(PropertyInfo property,
        int? precision = null, int? scale = null, string? format = null, string? sourceName = null)
    {
        var attrs = Attribute.GetCustomAttributes(property, inherit: true);
        var decAttr = attrs.OfType<KsqlDecimalAttribute>().FirstOrDefault();
        precision ??= decAttr?.Precision;
        scale ??= decAttr?.Scale;
        return new PropertyMeta
        {
            Name = property.Name,
            SourceName = sourceName,
            PropertyType = property.PropertyType,
            IsNullable = property.IsNullableProperty(),
            Precision = precision,
            Scale = scale,
            Format = format,
            Attributes = attrs.Cast<Attribute>().ToArray(),
            PropertyInfo = property,
            IsAutoGenerated = false
        };
    }

    public static PropertyMeta AutoGenerated(string name)
    {
        return new PropertyMeta
        {
            Name = name,
            SourceName = name,
            PropertyType = typeof(Guid),
            IsNullable = false,
            Precision = null,
            Scale = null,
            Format = null,
            Attributes = Array.Empty<Attribute>(),
            PropertyInfo = null,
            IsAutoGenerated = true
        };
    }
}
